{"version":3,"file":"logger.js","names":["logger","state","entityCount","typeCount","activityTimers","reducers","incrementActivityTimer","typeName","by","action","count","activity","setStatus","stopActivityTimer","end","createActivityTimer","reporter","pluginOptions","typeActivityTimer","activityTimer","formatLogMessage","useVerboseStyle","verbose","start"],"sources":["../../src/models/logger.ts"],"sourcesContent":["import { Reporter } from \"gatsby/reporter\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { IPluginOptions } from \"./gatsby-api\"\n\ntype ITimerReporter = ReturnType<Reporter[\"activityTimer\"]>\n\nexport interface ILoggerState {\n  entityCount: number\n  typeCount: { [name: string]: number }\n  activityTimers: {\n    [name: string]: { count: number; activity: ITimerReporter }\n  }\n}\n\nconst logger = {\n  state: {\n    entityCount: 0,\n    typeCount: {},\n    activityTimers: {},\n  } as ILoggerState,\n\n  reducers: {\n    incrementActivityTimer(\n      state: ILoggerState,\n      { typeName, by, action = `fetched` }\n    ): ILoggerState {\n      const logger = state.activityTimers[typeName]\n\n      if (!logger) {\n        return state\n      }\n\n      if (typeof by === `number`) {\n        logger.count += by\n        state.entityCount += by\n      }\n\n      logger.activity.setStatus(`${action} ${logger.count}`)\n\n      return state\n    },\n\n    stopActivityTimer(\n      state: ILoggerState,\n      { typeName, action = `fetched` }: { typeName: string; action: string }\n    ): ILoggerState {\n      const logger = state.activityTimers[typeName]\n\n      if (logger.count === 0) {\n        logger.activity.setStatus(`${action} 0`)\n      }\n\n      logger.activity.end()\n\n      return state\n    },\n\n    createActivityTimer(\n      state: ILoggerState,\n      {\n        typeName,\n        reporter,\n        pluginOptions,\n      }: { typeName: string; reporter: Reporter; pluginOptions: IPluginOptions }\n    ): ILoggerState {\n      if (state.activityTimers[typeName]) {\n        return state\n      }\n\n      const typeActivityTimer = {\n        count: 0,\n        activity: reporter.activityTimer(\n          formatLogMessage(typeName, {\n            useVerboseStyle: pluginOptions.verbose,\n          })\n        ),\n      }\n\n      if (pluginOptions.verbose) {\n        typeActivityTimer.activity.start()\n      }\n\n      state.activityTimers[typeName] = typeActivityTimer\n\n      return state\n    },\n  },\n}\n\nexport default logger\n"],"mappings":";;;;;AACA;;AAaA,MAAMA,MAAM,GAAG;EACbC,KAAK,EAAE;IACLC,WAAW,EAAE,CADR;IAELC,SAAS,EAAE,EAFN;IAGLC,cAAc,EAAE;EAHX,CADM;EAObC,QAAQ,EAAE;IACRC,sBAAsB,CACpBL,KADoB,EAEpB;MAAEM,QAAF;MAAYC,EAAZ;MAAgBC,MAAM,GAAI;IAA1B,CAFoB,EAGN;MACd,MAAMT,MAAM,GAAGC,KAAK,CAACG,cAAN,CAAqBG,QAArB,CAAf;;MAEA,IAAI,CAACP,MAAL,EAAa;QACX,OAAOC,KAAP;MACD;;MAED,IAAI,OAAOO,EAAP,KAAe,QAAnB,EAA4B;QAC1BR,MAAM,CAACU,KAAP,IAAgBF,EAAhB;QACAP,KAAK,CAACC,WAAN,IAAqBM,EAArB;MACD;;MAEDR,MAAM,CAACW,QAAP,CAAgBC,SAAhB,CAA2B,GAAEH,MAAO,IAAGT,MAAM,CAACU,KAAM,EAApD;MAEA,OAAOT,KAAP;IACD,CAnBO;;IAqBRY,iBAAiB,CACfZ,KADe,EAEf;MAAEM,QAAF;MAAYE,MAAM,GAAI;IAAtB,CAFe,EAGD;MACd,MAAMT,MAAM,GAAGC,KAAK,CAACG,cAAN,CAAqBG,QAArB,CAAf;;MAEA,IAAIP,MAAM,CAACU,KAAP,KAAiB,CAArB,EAAwB;QACtBV,MAAM,CAACW,QAAP,CAAgBC,SAAhB,CAA2B,GAAEH,MAAO,IAApC;MACD;;MAEDT,MAAM,CAACW,QAAP,CAAgBG,GAAhB;MAEA,OAAOb,KAAP;IACD,CAlCO;;IAoCRc,mBAAmB,CACjBd,KADiB,EAEjB;MACEM,QADF;MAEES,QAFF;MAGEC;IAHF,CAFiB,EAOH;MACd,IAAIhB,KAAK,CAACG,cAAN,CAAqBG,QAArB,CAAJ,EAAoC;QAClC,OAAON,KAAP;MACD;;MAED,MAAMiB,iBAAiB,GAAG;QACxBR,KAAK,EAAE,CADiB;QAExBC,QAAQ,EAAEK,QAAQ,CAACG,aAAT,CACR,IAAAC,kCAAA,EAAiBb,QAAjB,EAA2B;UACzBc,eAAe,EAAEJ,aAAa,CAACK;QADN,CAA3B,CADQ;MAFc,CAA1B;;MASA,IAAIL,aAAa,CAACK,OAAlB,EAA2B;QACzBJ,iBAAiB,CAACP,QAAlB,CAA2BY,KAA3B;MACD;;MAEDtB,KAAK,CAACG,cAAN,CAAqBG,QAArB,IAAiCW,iBAAjC;MAEA,OAAOjB,KAAP;IACD;;EAhEO;AAPG,CAAf;eA2EeD,M"}