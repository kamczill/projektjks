{"version":3,"file":"persist-cached-images.js","names":["persistPreviouslyCachedImages","helpers","pluginOptions","getGatsbyApi","mediaItemNodes","getNodesByType","schema","typePrefix","forEach","node","actions","touchNode","imageNodeMetaByUrl","getPersistentCache","key","store","dispatch","imageNodes","setState","nodeMetaByUrl"],"sources":["../../src/steps/persist-cached-images.ts"],"sourcesContent":["import { Step } from \"./../utils/run-steps\"\nimport store from \"~/store\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { getPersistentCache } from \"~/utils/cache\"\n\nconst persistPreviouslyCachedImages: Step = async (): Promise<void> => {\n  const { helpers, pluginOptions } = getGatsbyApi()\n\n  // get all existing media item nodes\n  const mediaItemNodes = helpers.getNodesByType(\n    `${pluginOptions.schema.typePrefix}MediaItem`\n  )\n\n  // and touch them so they aren't garbage collected.\n  // we will remove them as needed when receiving DELETE events from WP\n  mediaItemNodes.forEach(node => helpers.actions.touchNode(node))\n\n  const imageNodeMetaByUrl = await getPersistentCache({\n    key: `image-node-meta-by-url`,\n  })\n\n  if (imageNodeMetaByUrl) {\n    store.dispatch.imageNodes.setState({\n      nodeMetaByUrl: imageNodeMetaByUrl,\n    })\n  }\n}\n\nexport { persistPreviouslyCachedImages }\n"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA,MAAMA,6BAAmC,GAAG,YAA2B;EACrE,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAA6B,IAAAC,0BAAA,GAAnC,CADqE,CAGrE;;EACA,MAAMC,cAAc,GAAGH,OAAO,CAACI,cAAR,CACpB,GAAEH,aAAa,CAACI,MAAd,CAAqBC,UAAW,WADd,CAAvB,CAJqE,CAQrE;EACA;;EACAH,cAAc,CAACI,OAAf,CAAuBC,IAAI,IAAIR,OAAO,CAACS,OAAR,CAAgBC,SAAhB,CAA0BF,IAA1B,CAA/B;EAEA,MAAMG,kBAAkB,GAAG,MAAM,IAAAC,yBAAA,EAAmB;IAClDC,GAAG,EAAG;EAD4C,CAAnB,CAAjC;;EAIA,IAAIF,kBAAJ,EAAwB;IACtBG,cAAA,CAAMC,QAAN,CAAeC,UAAf,CAA0BC,QAA1B,CAAmC;MACjCC,aAAa,EAAEP;IADkB,CAAnC;EAGD;AACF,CArBD"}