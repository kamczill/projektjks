{"version":3,"file":"build-types.js","names":["unionType","typeBuilderApi","schema","type","pluginOptions","types","possibleTypes","filter","possibleType","typeIsExcluded","typeName","name","map","buildTypeName","length","resolveType","node","__typename","extensions","infer","filterTypeDefinition","buildUnionType","interfaceType","state","store","getState","ingestibles","remoteSchema","nodeInterfaceTypes","implementingTypes","getTypesThatImplementInterfaceType","transformedFields","transformFields","parentInterfacesImplementingTypes","parentType","fields","typeDef","includes","buildInterfaceType","objectType","gatsbyNodeTypes","fieldAliases","fieldBlacklist","Object","keys","description","interfaces","buildObjectType","enumType","buildEnumType","values","enumValues","reduce","accumulator"],"sources":["../../../src/steps/create-schema-customization/build-types.js"],"sourcesContent":["import store from \"~/store\"\nimport { transformFields } from \"./transform-fields\"\nimport { typeIsExcluded } from \"~/steps/ingest-remote-schema/is-excluded\"\nimport {\n  buildTypeName,\n  filterTypeDefinition,\n  getTypesThatImplementInterfaceType,\n} from \"./helpers\"\n\nconst unionType = typeBuilderApi => {\n  const { schema, type, pluginOptions } = typeBuilderApi\n\n  const types = type.possibleTypes\n    .filter(\n      possibleType =>\n        !typeIsExcluded({\n          pluginOptions,\n          typeName: possibleType.name,\n        })\n    )\n    .map(possibleType => buildTypeName(possibleType.name))\n\n  if (!types || !types.length) {\n    return false\n  }\n\n  let unionType = {\n    name: buildTypeName(type.name),\n    types,\n    resolveType: node => {\n      if (node.__typename) {\n        return buildTypeName(node.__typename)\n      }\n\n      return null\n    },\n    extensions: {\n      infer: false,\n    },\n  }\n\n  // @todo add this as a plugin option\n  unionType = filterTypeDefinition(unionType, typeBuilderApi, `UNION`)\n\n  return schema.buildUnionType(unionType)\n}\n\nconst interfaceType = typeBuilderApi => {\n  const { type, schema } = typeBuilderApi\n\n  const state = store.getState()\n  const { ingestibles } = state.remoteSchema\n  const { nodeInterfaceTypes } = ingestibles\n\n  const implementingTypes = getTypesThatImplementInterfaceType(type)\n\n  const transformedFields = transformFields({\n    parentInterfacesImplementingTypes: implementingTypes,\n    parentType: type,\n    fields: type.fields,\n  })\n\n  if (!transformedFields) {\n    return null\n  }\n\n  let typeDef = {\n    name: buildTypeName(type.name),\n    fields: transformedFields,\n    extensions: { infer: false },\n  }\n\n  // this is a regular interface type, not a node interface type so we need to resolve the type name\n  if (!nodeInterfaceTypes.includes(type.name)) {\n    typeDef.resolveType = node =>\n      node?.__typename ? buildTypeName(node.__typename) : null\n  }\n\n  typeDef = filterTypeDefinition(typeDef, typeBuilderApi, `INTERFACE`)\n\n  return schema.buildInterfaceType(typeDef)\n}\n\nconst objectType = typeBuilderApi => {\n  const { type, gatsbyNodeTypes, fieldAliases, fieldBlacklist, schema } =\n    typeBuilderApi\n\n  const transformedFields = transformFields({\n    fields: type.fields,\n    parentType: type,\n    gatsbyNodeTypes,\n    fieldAliases,\n    fieldBlacklist,\n  })\n\n  // if all child fields are excluded, this type shouldn't exist.\n  // check null first, otherwise cause:\n  // TypeError: Cannot convert undefined or null to object at Function.keys (<anonymous>)\n  // Also cause wordpress blog site build failure in createSchemaCustomization step\n  if (!transformedFields || !Object.keys(transformedFields).length) {\n    return false\n  }\n\n  let objectType = {\n    name: buildTypeName(type.name),\n    fields: transformedFields,\n    description: type.description,\n    extensions: {\n      infer: false,\n    },\n  }\n\n  if (type.interfaces?.includes(`Node`)) {\n    objectType.interfaces = [`Node`]\n  }\n\n  // @todo add this as a plugin option\n  objectType = filterTypeDefinition(objectType, typeBuilderApi, `OBJECT`)\n\n  return schema.buildObjectType(objectType)\n}\n\nconst enumType = ({ schema, type }) =>\n  schema.buildEnumType({\n    name: buildTypeName(type.name),\n    values: type.enumValues.reduce((accumulator, { name }) => {\n      accumulator[name] = { name }\n\n      return accumulator\n    }, {}),\n    description: type.description,\n  })\n\nexport default { unionType, interfaceType, objectType, enumType }\n"],"mappings":"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"}