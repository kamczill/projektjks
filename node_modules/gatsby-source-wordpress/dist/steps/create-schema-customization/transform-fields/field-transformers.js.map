{"version":3,"file":"field-transformers.js","names":["fieldTransformers","description","test","field","type","kind","ofType","transform","typeIsABuiltInScalar","findNamedTypeName","name","typeName","normalizedTypeName","buildTypeName","implementsNodeInterface","store","getState","remoteSchema","typeMap","get","interfaces","some","i","isAListOfGatsbyNodeInterfaces","transformListOfGatsbyNodes","fieldName","originalTypeName","typeKind","findTypeKind","resolve","source","resolvedField","autoAliasedFieldPropertyName","aliasedField","gatsbyNodeTypes","getGatsbyNodeTypeNames","pluginOptions","getPluginOptions","isAnInterfaceTypeOfGatsbyNodes","possibleTypes","filter","possibleType","typeIsExcluded","every","includes","transformGatsbyNodeObject","find","transformListOfUnions","transformUnion"],"sources":["../../../../src/steps/create-schema-customization/transform-fields/field-transformers.js"],"sourcesContent":["import { buildTypeName, findNamedTypeName, findTypeKind } from \"../helpers\"\nimport { transformUnion, transformListOfUnions } from \"./transform-union\"\nimport {\n  transformListOfGatsbyNodes,\n  transformGatsbyNodeObject,\n} from \"./transform-object\"\nimport { getGatsbyNodeTypeNames } from \"../../source-nodes/fetch-nodes/fetch-nodes\"\nimport { typeIsABuiltInScalar } from \"~/steps/create-schema-customization/helpers\"\nimport store from \"~/store\"\nimport { typeIsExcluded } from \"~/steps/ingest-remote-schema/is-excluded\"\nimport { getPluginOptions } from \"~/utils/get-gatsby-api\"\n\nexport const fieldTransformers = [\n  {\n    description: `NON_NULL Scalar`,\n    test: field =>\n      field.type.kind === `NON_NULL` && field.type.ofType.kind === `SCALAR`,\n\n    transform: ({ field }) => {\n      if (typeIsABuiltInScalar(field.type)) {\n        return `${findNamedTypeName(field.type.ofType)}!`\n      } else {\n        return `JSON!`\n      }\n    },\n  },\n\n  {\n    description: `NON_NULL list type`,\n    test: field =>\n      field.type.kind === `NON_NULL` &&\n      field.type.ofType.kind === `LIST` &&\n      (field.type.ofType.name || field.type.ofType?.ofType?.name),\n\n    transform: ({ field }) => {\n      const typeName = findNamedTypeName(field.type)\n      const normalizedTypeName = typeIsABuiltInScalar(field.type)\n        ? typeName\n        : buildTypeName(typeName)\n\n      return `[${normalizedTypeName}]!`\n    },\n  },\n\n  {\n    description: `Lists of Gatsby node interfaces`,\n    test: field => {\n      const implementsNodeInterface = store\n        .getState()\n        .remoteSchema.typeMap.get(findNamedTypeName(field.type))\n        ?.interfaces?.some(i => i.name === `Node`)\n\n      const isAListOfGatsbyNodeInterfaces =\n        (field.type.kind === `LIST` || field.type.ofType?.kind === `LIST`) &&\n        implementsNodeInterface\n\n      return isAListOfGatsbyNodeInterfaces\n    },\n\n    transform: transformListOfGatsbyNodes,\n  },\n\n  {\n    description: `NON_NULL lists of NON_NULL types`,\n    test: field =>\n      field.type.kind === `NON_NULL` &&\n      field.type.ofType.kind === `LIST` &&\n      field.type.ofType?.ofType?.kind === `NON_NULL`,\n\n    transform: ({ field, fieldName }) => {\n      const originalTypeName = findNamedTypeName(field.type)\n      const typeKind = findTypeKind(field.type)\n\n      const normalizedTypeName =\n        typeKind === `SCALAR` && typeIsABuiltInScalar(field.type)\n          ? originalTypeName\n          : buildTypeName(originalTypeName)\n\n      return {\n        type: `[${normalizedTypeName}!]!`,\n        resolve: source => {\n          const resolvedField = source[fieldName]\n\n          if (typeof resolvedField !== `undefined`) {\n            return resolvedField ?? []\n          }\n\n          const autoAliasedFieldPropertyName = `${fieldName}__typename_${field?.type?.name}`\n\n          const aliasedField = source[autoAliasedFieldPropertyName]\n\n          return aliasedField ?? []\n        },\n      }\n    },\n  },\n\n  {\n    description: `Lists of NON_NULL builtin types`,\n    test: field =>\n      field.type.kind === `LIST` &&\n      field.type.ofType.kind === `NON_NULL` &&\n      (field.type.ofType.name ?? field.type.ofType?.ofType?.name) &&\n      typeIsABuiltInScalar(field.type),\n\n    transform: ({ field }) => `[${findNamedTypeName(field.type)}!]`,\n  },\n\n  {\n    description: `Lists of NON_NULL types`,\n    test: field =>\n      field.type.kind === `LIST` &&\n      field.type.ofType.kind === `NON_NULL` &&\n      (field.type.ofType.name ?? field.type.ofType?.ofType?.name),\n\n    transform: ({ field }) =>\n      `[${buildTypeName(findNamedTypeName(field.type))}!]`,\n  },\n\n  {\n    description: `ENUM type`,\n    test: field => field.type.kind === `ENUM`,\n    transform: ({ field }) => buildTypeName(field.type.name),\n  },\n\n  {\n    description: `Scalar type`,\n    test: field => field.type.kind === `SCALAR`,\n    transform: ({ field }) => {\n      if (typeIsABuiltInScalar(field.type)) {\n        return field.type.name\n      } else {\n        // custom scalars are typed as JSON\n        // @todo if frequently requested,\n        // make this hookable so a plugin could register a custom scalar\n        return `JSON`\n      }\n    },\n  },\n\n  {\n    description: `Gatsby Node Objects or Gatsby Node Interfaces where all possible types are Gatsby Nodes`,\n    test: field => {\n      const gatsbyNodeTypes = getGatsbyNodeTypeNames()\n\n      const pluginOptions = getPluginOptions()\n\n      const isAnInterfaceTypeOfGatsbyNodes =\n        // if this is an interface\n        field.type.kind === `INTERFACE` &&\n        // and every possible type is a future gatsby node\n        store\n          .getState()\n          // get the full type for this interface\n          .remoteSchema.typeMap.get(findNamedTypeName(field.type))\n          // filter out any excluded types\n          .possibleTypes?.filter(\n            possibleType =>\n              !typeIsExcluded({\n                pluginOptions,\n                typeName: possibleType.name,\n              })\n          )\n          // if every remaining type is a Gatsby node type\n          // then use this field transformer\n          ?.every(possibleType => gatsbyNodeTypes.includes(possibleType.name))\n\n      return (\n        (gatsbyNodeTypes.includes(field.type.name) &&\n          field.type.kind === `OBJECT`) ||\n        isAnInterfaceTypeOfGatsbyNodes\n      )\n    },\n\n    transform: transformGatsbyNodeObject,\n  },\n\n  {\n    description: `Lists of Gatsby Node Object types`,\n    test: field => {\n      const gatsbyNodeTypes = getGatsbyNodeTypeNames()\n\n      const {\n        remoteSchema: { typeMap },\n      } = store.getState()\n\n      return (\n        // this is a list of Gatsby nodes\n        (field.type.kind === `LIST` &&\n          field.type.ofType.kind === `OBJECT` &&\n          gatsbyNodeTypes.includes(field.type.ofType.name)) ||\n        // or it's a list of an interface type which Gatsby nodes implement\n        (field.type.kind === `LIST` &&\n          field.type.ofType.kind === `INTERFACE` &&\n          typeMap\n            .get(field.type.ofType.name)\n            ?.possibleTypes?.find(possibleType =>\n              gatsbyNodeTypes.includes(possibleType.name)\n            ))\n      )\n    },\n\n    transform: transformListOfGatsbyNodes,\n  },\n\n  {\n    description: `Non-Gatsby Node Objects`,\n    test: field => field.type.kind === `OBJECT`,\n    transform: ({ field }) => buildTypeName(field.type.name),\n  },\n\n  {\n    description: `Lists of Non Gatsby Node Objects`,\n    test: field =>\n      field.type.kind === `LIST` &&\n      (field.type.ofType.kind === `OBJECT` ||\n        field.type.ofType.kind === `ENUM`),\n\n    transform: ({ field }) => `[${buildTypeName(field.type.ofType.name)}]`,\n  },\n\n  {\n    description: `Lists of Union types`,\n    test: field =>\n      field.type.kind === `LIST` && field.type.ofType.kind === `UNION`,\n\n    transform: transformListOfUnions,\n  },\n\n  {\n    description: `Lists of Scalar types`,\n    test: field =>\n      field.type.kind === `LIST` && field.type.ofType.kind === `SCALAR`,\n\n    transform: ({ field }) => {\n      if (typeIsABuiltInScalar(field.type)) {\n        return `[${field.type.ofType.name}]`\n      } else {\n        return `[JSON]`\n      }\n    },\n  },\n\n  {\n    description: `Lists of Interface types`,\n    test: field =>\n      field.type.kind === `LIST` && field.type.ofType.kind === `INTERFACE`,\n\n    transform: ({ field }) =>\n      `[${buildTypeName(findNamedTypeName(field.type))}]`,\n  },\n\n  {\n    description: `Union type`,\n    test: field => field.type.kind === `UNION`,\n    transform: transformUnion,\n  },\n\n  {\n    description: `Interface type`,\n    test: field => field.type.kind === `INTERFACE`,\n    transform: ({ field }) => buildTypeName(field.type.name),\n  },\n\n  {\n    description: `Lists of NON_NULL types`,\n    test: field =>\n      findTypeKind(field.type) !== `LIST` && field.type.kind === `NON_NULL`,\n    transform: ({ field }) =>\n      `${buildTypeName(findNamedTypeName(field.type))}!`,\n  },\n\n  // for finding unhandled types\n  // {\n  //   description: `Unhandled type`,\n  //   test: () => true,\n  //   transform: ({ field }) => dd(field),\n  // },\n]\n"],"mappings":"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"}