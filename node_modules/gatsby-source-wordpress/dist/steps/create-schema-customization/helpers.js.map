{"version":3,"file":"helpers.js","names":["buildInterfacesListForType","type","shouldAddNodeType","list","interfaces","filter","interfaceType","interfaceTypeSettings","getTypeSettingsByType","exclude","fieldOfTypeWasFetched","map","name","buildTypeName","push","ceIntCache","isWpgqlOneThirteenZeroPlus","typeMap","store","getState","remoteSchema","connectionInterface","get","edgeInterface","schema","typePrefix","prefix","getPluginOptions","endsWith","startsWith","findTypeKind","kind","ofType","findNamedType","findNamedTypeName","namedType","fetchedTypes","typeName","typeWasFetched","implementingTypeCache","Map","getTypesThatImplementInterfaceType","has","state","allTypes","values","implementingTypes","Array","from","find","singleInterface","possibleTypes","length","set","supportedScalars","typeIsABuiltInScalar","includes","typeIsASupportedScalar","typeSettingCache","cachedTypeSettings","allTypeSettings","gatsbyApi","pluginOptions","typeSettings","__allTypeSetting","__all","limit","mergedSettings","filterTypeDefinition","typeDefinition","typeBuilderApi","typeKind","filters","typeDefinitionFilters","forEach","typeDef","introspectionFieldTypeToSDL","fieldType","openingTagsList","closingTagsList","reference","normalizedTypeName","join","reverse"],"sources":["../../../src/steps/create-schema-customization/helpers.js"],"sourcesContent":["import store from \"~/store\"\nimport { typeDefinitionFilters } from \"./type-filters\"\nimport { getPluginOptions } from \"~/utils/get-gatsby-api\"\nimport { cloneDeep, merge } from \"lodash\"\n\nexport const buildInterfacesListForType = type => {\n  let shouldAddNodeType = false\n\n  const list = (type?.interfaces || [])\n    .filter(interfaceType => {\n      const interfaceTypeSettings = getTypeSettingsByType(interfaceType)\n\n      return (\n        !interfaceTypeSettings.exclude && fieldOfTypeWasFetched(interfaceType)\n      )\n    })\n    .map(({ name }) => {\n      if (name === `Node`) {\n        shouldAddNodeType = true\n      }\n      return buildTypeName(name)\n    })\n\n  if (shouldAddNodeType) {\n    list.push(`Node`)\n  }\n\n  return list\n}\n\nlet ceIntCache = null\nconst isWpgqlOneThirteenZeroPlus = () => {\n  if (ceIntCache !== null) {\n    return ceIntCache\n  }\n\n  const { typeMap } = store.getState().remoteSchema\n\n  const connectionInterface = !!typeMap.get(`Connection`)\n  const edgeInterface = !!typeMap.get(`Edge`)\n\n  const isWpgqlOneThirteenZeroPlus = connectionInterface || edgeInterface\n\n  ceIntCache = isWpgqlOneThirteenZeroPlus\n\n  return isWpgqlOneThirteenZeroPlus\n}\n\n/**\n * This function namespaces typenames with a prefix\n */\nexport const buildTypeName = name => {\n  if (!name || typeof name !== `string`) {\n    return null\n  }\n\n  const {\n    schema: { typePrefix: prefix },\n  } = getPluginOptions()\n\n  // this is for our namespace type on the root { wp { ...fields } }\n  if (name === prefix) {\n    return name\n  }\n\n  // Gatsby makes the same type, so we need to rename it to prevent conflicts\n  if (name === `Filter`) {\n    name = `FilterType`\n  }\n\n  if (\n    // Starting in WPGraphQL 1.13.0, Gatsby and WPGraphQL both generate types ending in these strings for every node type in the schema, so we need to rename types to prevent conflicts.\n    // for users on older versions of WPGraphQL we should try to keep the schema how it was before\n    isWpgqlOneThirteenZeroPlus() &&\n    (name.endsWith(`Connection`) ||\n      name.endsWith(`Edge`) ||\n      name.endsWith(`PageInfo`))\n  ) {\n    name += `Type`\n  }\n\n  if (name.startsWith(prefix)) {\n    return name\n  }\n\n  return prefix + name\n}\n\n/**\n * Find the first type kind of a Type definition pulled via introspection\n * @param {object} type\n */\nexport const findTypeKind = type => {\n  if (type?.kind) {\n    return type.kind\n  }\n\n  if (type?.ofType) {\n    return findTypeKind(type.ofType)\n  }\n\n  return null\n}\n\nexport const findNamedType = type => {\n  if (!type) {\n    return null\n  }\n\n  if (type.ofType) {\n    return findNamedType(type.ofType)\n  }\n\n  return type\n}\n\nexport const findNamedTypeName = type => {\n  const namedType = findNamedType(type)\n\n  return namedType?.name\n}\n\nexport const fieldOfTypeWasFetched = type => {\n  const { fetchedTypes } = store.getState().remoteSchema\n  const typeName = findNamedTypeName(type)\n  const typeWasFetched = !!fetchedTypes.get(typeName)\n\n  return typeWasFetched\n}\n\nconst implementingTypeCache = new Map()\n\nexport const getTypesThatImplementInterfaceType = type => {\n  if (implementingTypeCache.has(type.name)) {\n    return implementingTypeCache.get(type.name)\n  }\n\n  const state = store.getState()\n  const { typeMap } = state.remoteSchema\n\n  const allTypes = typeMap.values()\n\n  const implementingTypes = Array.from(allTypes)\n    .filter(\n      ({ interfaces }) =>\n        interfaces &&\n        // find types that implement this interface type\n        interfaces.find(singleInterface => singleInterface.name === type.name)\n    )\n    .map(type => typeMap.get(type.name))\n    .filter(\n      type =>\n        type.kind !== `UNION` ||\n        // if this is a union type, make sure the union type has one or more member types, otherwise schema customization will throw an error\n        (!!type.possibleTypes && !!type.possibleTypes.length)\n    )\n\n  implementingTypeCache.set(type.name, implementingTypes)\n\n  return implementingTypes\n}\n\nconst supportedScalars = [\n  `Int`,\n  `Float`,\n  `String`,\n  `Boolean`,\n  `ID`,\n  `Date`,\n  `JSON`,\n]\n\nexport const typeIsABuiltInScalar = type =>\n  // @todo the next function and this one are redundant.\n  // see the next todo on how to fix the issue. If that todo is resolved, these functions will be identical. :(\n  supportedScalars.includes(findNamedTypeName(type))\n\nexport const typeIsASupportedScalar = type => {\n  if (findTypeKind(type) !== `SCALAR`) {\n    // @todo returning true here seems wrong since a type that is not a scalar can't be a supported scalar... so there is some other logic elsewhere that is wrong\n    // making this return false causes errors in the schema\n    return true\n  }\n\n  return supportedScalars.includes(findNamedTypeName(type))\n}\n\nconst typeSettingCache = new Map()\n\n// retrieves plugin settings for the provided type\nexport const getTypeSettingsByType = type => {\n  if (!type) {\n    return {}\n  }\n\n  const typeName = findNamedTypeName(type)\n\n  if (!typeName) {\n    return {}\n  }\n\n  const cachedTypeSettings = typeSettingCache.get(typeName)\n\n  if (cachedTypeSettings) {\n    return cachedTypeSettings\n  }\n\n  // the plugin options object containing every type setting\n  const allTypeSettings = store.getState().gatsbyApi.pluginOptions.type\n\n  const typeSettings = cloneDeep(allTypeSettings[typeName] || {})\n\n  // the type.__all plugin option which is applied to every type setting\n  const __allTypeSetting = cloneDeep(allTypeSettings.__all || {})\n\n  if (typeName === `MediaItem`) {\n    delete __allTypeSetting.limit\n    delete typeSettings.limit\n  }\n\n  if (typeSettings) {\n    const mergedSettings = merge(__allTypeSetting, typeSettings)\n\n    typeSettingCache.set(typeName, mergedSettings)\n\n    return mergedSettings\n  }\n\n  typeSettingCache.set(typeName, __allTypeSetting)\n\n  return __allTypeSetting\n}\n\n/**\n * This is used to filter the automatically generated type definitions before they're added to the schema customization api.\n */\nexport const filterTypeDefinition = (\n  typeDefinition,\n  typeBuilderApi,\n  typeKind\n) => {\n  const filters = typeDefinitionFilters.filter(filter =>\n    [typeBuilderApi.type.name, `__all`].includes(filter.typeName)\n  )\n\n  if (filters?.length) {\n    filters.forEach(filter => {\n      if (filter && typeof filter.typeDef === `function`) {\n        typeDefinition = filter.typeDef(\n          typeDefinition,\n          typeBuilderApi,\n          typeKind\n        )\n      }\n    })\n  }\n\n  return typeDefinition\n}\n\n// we should be using graphql-js for this kind of thing, but unfortunately this project didn't use it from the beginning so it would be a huge lift to refactor to use it now. In the future we will be rewriting this plugin using a new Gatsby source plugin toolkit, and at that time we'll use graphql-js.\n// from introspection field types this will return a value like:\n// `String` or `[String]` or `[String!]!` or `[String]!` or `[[String]]` or `[[String]!]!` or `[[String]!]`, etc\nexport const introspectionFieldTypeToSDL = fieldType => {\n  const openingTagsList = []\n  const closingTagsList = []\n\n  let reference = fieldType\n\n  while (reference) {\n    switch (reference.kind) {\n      case `SCALAR`: {\n        const normalizedTypeName = supportedScalars.includes(reference.name)\n          ? reference.name\n          : `JSON`\n\n        openingTagsList.push(normalizedTypeName)\n        break\n      }\n      case `OBJECT`:\n      case `INTERFACE`:\n      case `UNION`:\n        openingTagsList.push(buildTypeName(reference.name))\n        break\n      case `NON_NULL`:\n        closingTagsList.push(`!`)\n        break\n      case `LIST`:\n        openingTagsList.push(`[`)\n        closingTagsList.push(`]`)\n        break\n      default:\n        break\n    }\n\n    reference = reference.ofType\n  }\n\n  return openingTagsList.join(``) + closingTagsList.reverse().join(``)\n}\n"],"mappings":"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"}