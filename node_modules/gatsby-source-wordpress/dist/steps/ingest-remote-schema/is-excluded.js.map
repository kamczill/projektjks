{"version":3,"file":"is-excluded.js","names":["typeIsExcluded","pluginOptions","typeName","type","exclude","fieldIsExcludedOnAll","field","allFieldSettings","__all","excludeFieldNames","includes","name","fieldIsExcludedOnParentType","parentType","state","store","getState","typeMap","remoteSchema","fullType","get","findNamedTypeName","parentTypeNodesField","fields","find","parentTypeNameSettings","getTypeSettingsByType","parentTypeNodesFieldTypeNameSettings"],"sources":["../../../src/steps/ingest-remote-schema/is-excluded.js"],"sourcesContent":["import store from \"~/store\"\nimport {\n  findNamedTypeName,\n  getTypeSettingsByType,\n} from \"~/steps/create-schema-customization/helpers\"\n\nconst typeIsExcluded = ({ pluginOptions, typeName }) =>\n  pluginOptions &&\n  pluginOptions.type[typeName] &&\n  pluginOptions.type[typeName].exclude\n\nconst fieldIsExcludedOnAll = ({ pluginOptions, field }) => {\n  const allFieldSettings = pluginOptions?.type?.__all\n\n  if (!allFieldSettings) {\n    return false\n  }\n  return !!allFieldSettings?.excludeFieldNames?.includes(field?.name)\n}\n\nconst fieldIsExcludedOnParentType = ({ field, parentType }) => {\n  const state = store.getState()\n  const { typeMap } = state.remoteSchema\n\n  const fullType = typeMap.get(findNamedTypeName(parentType))\n\n  const parentTypeNodesField = fullType?.fields?.find(\n    field => field.name === `nodes`\n  )\n\n  const parentTypeNameSettings = getTypeSettingsByType(parentType)\n  const parentTypeNodesFieldTypeNameSettings = getTypeSettingsByType(\n    parentTypeNodesField?.type\n  )\n\n  const fieldIsExcludedOnParentType =\n    // if this field is excluded on either the parent type\n    parentTypeNameSettings?.excludeFieldNames?.includes(field?.name) ||\n    // or the parent type has a \"nodes\" field and that type has this field excluded\n    parentTypeNodesFieldTypeNameSettings?.excludeFieldNames?.includes(\n      field?.name\n    )\n\n  return !!fieldIsExcludedOnParentType\n}\n\nexport { typeIsExcluded, fieldIsExcludedOnAll, fieldIsExcludedOnParentType }\n"],"mappings":";;;;;;;AAAA;;AACA;;AAKA,MAAMA,cAAc,GAAG,CAAC;EAAEC,aAAF;EAAiBC;AAAjB,CAAD,KACrBD,aAAa,IACbA,aAAa,CAACE,IAAd,CAAmBD,QAAnB,CADA,IAEAD,aAAa,CAACE,IAAd,CAAmBD,QAAnB,EAA6BE,OAH/B;;;;AAKA,MAAMC,oBAAoB,GAAG,CAAC;EAAEJ,aAAF;EAAiBK;AAAjB,CAAD,KAA8B;EAAA;;EACzD,MAAMC,gBAAgB,GAAGN,aAAH,aAAGA,aAAH,8CAAGA,aAAa,CAAEE,IAAlB,wDAAG,oBAAqBK,KAA9C;;EAEA,IAAI,CAACD,gBAAL,EAAuB;IACrB,OAAO,KAAP;EACD;;EACD,OAAO,CAAC,EAACA,gBAAD,aAACA,gBAAD,wCAACA,gBAAgB,CAAEE,iBAAnB,kDAAC,sBAAqCC,QAArC,CAA8CJ,KAA9C,aAA8CA,KAA9C,uBAA8CA,KAAK,CAAEK,IAArD,CAAD,CAAR;AACD,CAPD;;;;AASA,MAAMC,2BAA2B,GAAG,CAAC;EAAEN,KAAF;EAASO;AAAT,CAAD,KAA2B;EAAA;;EAC7D,MAAMC,KAAK,GAAGC,cAAA,CAAMC,QAAN,EAAd;;EACA,MAAM;IAAEC;EAAF,IAAcH,KAAK,CAACI,YAA1B;EAEA,MAAMC,QAAQ,GAAGF,OAAO,CAACG,GAAR,CAAY,IAAAC,0BAAA,EAAkBR,UAAlB,CAAZ,CAAjB;EAEA,MAAMS,oBAAoB,GAAGH,QAAH,aAAGA,QAAH,2CAAGA,QAAQ,CAAEI,MAAb,qDAAG,iBAAkBC,IAAlB,CAC3BlB,KAAK,IAAIA,KAAK,CAACK,IAAN,KAAgB,OADE,CAA7B;EAIA,MAAMc,sBAAsB,GAAG,IAAAC,8BAAA,EAAsBb,UAAtB,CAA/B;EACA,MAAMc,oCAAoC,GAAG,IAAAD,8BAAA,EAC3CJ,oBAD2C,aAC3CA,oBAD2C,uBAC3CA,oBAAoB,CAAEnB,IADqB,CAA7C;EAIA,MAAMS,2BAA2B,GAC/B;EACA,CAAAa,sBAAsB,SAAtB,IAAAA,sBAAsB,WAAtB,qCAAAA,sBAAsB,CAAEhB,iBAAxB,gFAA2CC,QAA3C,CAAoDJ,KAApD,aAAoDA,KAApD,uBAAoDA,KAAK,CAAEK,IAA3D,QACA;EACAgB,oCAFA,aAEAA,oCAFA,gDAEAA,oCAAoC,CAAElB,iBAFtC,0DAEA,sBAAyDC,QAAzD,CACEJ,KADF,aACEA,KADF,uBACEA,KAAK,CAAEK,IADT,CAFA,CAFF;EAQA,OAAO,CAAC,CAACC,2BAAT;AACD,CAxBD"}