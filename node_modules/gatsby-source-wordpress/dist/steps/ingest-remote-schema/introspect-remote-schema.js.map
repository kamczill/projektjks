{"version":3,"file":"introspect-remote-schema.js","names":["getCachedRemoteIntrospectionDataCacheKey","state","store","getState","pluginOptions","gatsbyApi","INTROSPECTION_CACHE_KEY","url","getCachedRemoteIntrospectionData","introspectionData","getPersistentCache","key","remoteSchemaSupportsFieldNameOnTypeName","fieldName","typeName","type","__schema","types","find","name","fieldExists","fields","introspectAndStoreRemoteSchema","schemaWasChanged","remoteSchema","printSchemaDiff","debug","graphql","printIntrospectionDiff","preview","staleIntrospectionData","data","fetchGraphql","query","introspectionQuery","setPersistentCache","value","console","log","forEach","staleTypeJSON","JSON","stringify","newType","newTypeJSON","typeDiff","diff","diffJson","length","part","added","removed","chalk","green","bold","trim","split","map","line","index","join","typeMap","Map","dispatch","setState"],"sources":["../../../src/steps/ingest-remote-schema/introspect-remote-schema.js"],"sourcesContent":["import chalk from \"chalk\"\nimport * as diff from \"diff\"\nimport { uniqBy } from \"lodash\"\nimport store from \"~/store\"\nimport { setPersistentCache, getPersistentCache } from \"~/utils/cache\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { introspectionQuery } from \"~/utils/graphql-queries\"\n\n/**\n * Builds the cache key for retrieving cached introspection data\n */\nconst getCachedRemoteIntrospectionDataCacheKey = () => {\n  const state = store.getState()\n  const { pluginOptions } = state.gatsbyApi\n\n  const INTROSPECTION_CACHE_KEY = `${pluginOptions.url}--introspection-data`\n\n  return INTROSPECTION_CACHE_KEY\n}\n\n/**\n * Returns cached introspection data for the remote WPGraphQL schema\n */\nconst getCachedRemoteIntrospectionData = async () => {\n  const INTROSPECTION_CACHE_KEY = getCachedRemoteIntrospectionDataCacheKey()\n  const introspectionData = await getPersistentCache({\n    key: INTROSPECTION_CACHE_KEY,\n  })\n\n  return introspectionData\n}\n\n/**\n * Checks if WPGraphQL is exposing a field on a type\n * for example `GatsbyPreviewData.manifestIds`\n * This allows us to make otherwise breaking changes in a backwards compatible way\n */\nexport const remoteSchemaSupportsFieldNameOnTypeName = async ({\n  fieldName,\n  typeName,\n}) => {\n  const introspectionData = await getCachedRemoteIntrospectionData()\n\n  const type = introspectionData.__schema.types.find(\n    ({ name }) => name === typeName\n  )\n\n  const fieldExists = !!type?.fields?.find(({ name }) => name === fieldName)\n\n  return fieldExists\n}\n\nconst introspectAndStoreRemoteSchema = async () => {\n  const state = store.getState()\n  const { pluginOptions } = state.gatsbyApi\n  const { schemaWasChanged } = state.remoteSchema\n\n  let introspectionData = await getCachedRemoteIntrospectionData()\n\n  const printSchemaDiff =\n    pluginOptions?.debug?.graphql?.printIntrospectionDiff ||\n    pluginOptions?.debug?.preview\n\n  let staleIntrospectionData\n\n  if (!introspectionData || schemaWasChanged) {\n    const { data } = await fetchGraphql({\n      query: introspectionQuery,\n    })\n\n    if (introspectionData) {\n      staleIntrospectionData = introspectionData\n    }\n\n    introspectionData = data\n\n    const INTROSPECTION_CACHE_KEY = getCachedRemoteIntrospectionDataCacheKey()\n\n    // cache introspection response\n    await setPersistentCache({\n      key: INTROSPECTION_CACHE_KEY,\n      value: introspectionData,\n    })\n  }\n\n  if (staleIntrospectionData && printSchemaDiff) {\n    console.log(`\\nData changed in WordPress schema:`)\n    staleIntrospectionData.__schema.types.forEach(type => {\n      const staleTypeJSON = JSON.stringify(type, null, 2)\n\n      const newType = introspectionData.__schema.types.find(\n        ({ name }) => name === type.name\n      )\n      const newTypeJSON = JSON.stringify(newType, null, 2)\n\n      if (staleTypeJSON === newTypeJSON) {\n        return\n      }\n\n      const typeDiff =\n        type && newType ? uniqBy(diff.diffJson(type, newType), `value`) : null\n\n      if (typeDiff?.length) {\n        console.log(`\\nFound changes to the ${type.name} type\\n`)\n        typeDiff.forEach(part => {\n          if (part.added || part.removed) {\n            console.log(\n              chalk.green(\n                chalk.bold(`${part.added ? `Added` : `Removed`}:\\n`) +\n                  part.value\n                    .trim()\n                    .split(`\\n`)\n                    .map(\n                      (line, index) =>\n                        `${part.added ? `+` : `-`}${\n                          index === 0 ? `\\t` : ` `\n                        }${line}`\n                    )\n                    .join(`\\n`)\n              )\n            )\n          }\n        })\n        console.log(`\\n`)\n      }\n    })\n  }\n\n  const typeMap = new Map(\n    introspectionData.__schema.types.map(type => [type.name, type])\n  )\n\n  store.dispatch.remoteSchema.setState({ introspectionData, typeMap })\n}\n\nexport { introspectAndStoreRemoteSchema }\n"],"mappings":"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"}