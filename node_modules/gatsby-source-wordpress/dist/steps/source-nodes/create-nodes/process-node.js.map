{"version":3,"file":"process-node.js","names":["getPlaceholderUrlFromMediaItemNode","node","pluginOptions","placeholderSizeByWidth","placeholderSizeByName","mediaDetails","sizes","forEach","size","name","type","MediaItem","placeholderSizeName","Number","width","placeHolderSize","sourceUrl","findReferencedImageNodeIds","nodeString","lazyNodes","usingGatsbyV4OrGreater","matchedIds","execall","map","match","subMatches","filter","id","getCheerioImgDbId","cheerioImg","dataAttributeId","attribs","class","wpImageClass","split","find","className","includes","wpImageClassDashArray","wpImageClassId","length","dbIdToMediaItemRelayId","dbId","b64e","getCheerioImgRelayId","ensureSrcHasHostname","src","wpUrl","protocol","host","url","parse","startsWith","pickNodeBySourceUrlOrCheerioImg","mediaItemNodes","possibleHtmlSrcs","stripImageSizesFromUrl","imageNode","mediaItemNode","mediaItemUrl","replace","displayedFailedToRestoreMessage","fetchNodeHtmlImageMediaItemNodes","cheerioImages","helpers","nodeMetaByUrl","store","getState","imageNodes","previouslyCachedNodesByUrl","Promise","all","Object","entries","existingNode","getNode","reporter","warn","formatLogMessage","Boolean","mediaItemUrls","mediaItemNodesBySourceUrl","fetchReferencedMediaItemsAndCreateNodes","mediaItemDbIds","mediaItemRelayIds","relayId","mediaItemNodesById","referencedMediaItemNodeIds","createdNodes","htmlMatchesToMediaItemNodesMap","Map","htmlImgSrc","cacheCreatedFileNodeBySrc","set","getCheerioElementFromMatch","tag","parsedMatch","JSON","$","cheerio","load","xml","withDomLvl1","normalizeWhitespace","xmlMode","decodeEntities","cheerioElement","getCheerioElementsFromMatches","imgTagMatches","isWebUri","encodeURI","getLargestSizeFromSizesAttribute","sizesString","sizesStringsArray","reduce","largest","currentSizeString","maxWidth","substring","indexOf","trim","maxWidthNumber","noLargestAndMaxWidthIsANumber","isNaN","maxWidthIsALargerNumberThanLargest","findImgTagMaxWidthFromCheerioImg","widthNumber","largestSize","getFileNodeRelativePathname","fileNode","fileName","internal","contentDigest","base","getFileNodePublicPath","publicPath","path","join","process","cwd","copyFileToStaticAndReturnUrlPath","fs","existsSync","copy","absolutePath","dereference","err","console","error","relativeUrl","pathPrefix","dispatch","pushNodeMeta","modifiedGmt","imgSrcRemoteFileRegex","getImgSrcRemoteFileMatchesFromNodeString","isInJSON","getImgTagMatches","replaceNodeHtmlImages","html","useGatsbyImage","exclude","imageUrlMatches","htmlMatchesWithImageResizes","matchInfo","get","isMediaItemNode","__typename","localFile","extension","mimeType","mediaType","imgTagMaxWidth","mediaItemNodeWidth","fallbackImageMaxWidth","configuredMaxWidth","imageMaxWidth","quality","imageQuality","gatsbyTransformerSharpSupportsThisFileType","supportedExtensions","imageResize","publicUrl","imageUrl","placeholderUrl","formats","generateWebpImages","push","generateAvifImages","gatsbyImageResolver","height","filename","basename","file","layout","placeholder","placeholderType","actions","gatsbyStore","publicUrlResolver","e","replaceIndex","matchResize","ReactGatsbyImage","gatsbyImageHydrationData","images","sources","fallback","image","alt","String","React","createElement","GatsbyImage","gatsbyImageStringRaw","ReactDOMServer","renderToString","stringify","gatsbyImageStringJSON","gatsbyImageString","replaceAll","replaceFileLinks","createStaticFiles","hrefMatches","RegExp","mediaItemUrlsAndMatches","matchGroup","findReplaceMaps","parent","mediaItemMatchGroup","hostname","getWpLinkRegex","replaceNodeHtmlLinks","wpLinkRegex","linkMatches","normalizedMatch","normalizedPath","thisMatchRegex","searchAndReplaceNodeStrings","Array","isArray","searchAndReplace","search","searchRegex","stringMatches","processNodeString","nodeStringFilters","nodeStringFilter","processNode","nodeMediaItemIdReferences","add","processedNodeString","processedNode"],"sources":["../../../../src/steps/source-nodes/create-nodes/process-node.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\nimport { isWebUri } from \"valid-url\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport React from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport stringify from \"fast-json-stable-stringify\"\nimport execall from \"execall\"\nimport cheerio from \"cheerio\"\nimport url from \"url\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport { supportedExtensions } from \"gatsby-transformer-sharp/supported-extensions\"\nimport replaceAll from \"replaceall\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\nimport { gatsbyImageResolver } from \"gatsby-plugin-utils/dist/polyfill-remote-file/graphql/gatsby-image-resolver\"\nimport { publicUrlResolver } from \"gatsby-plugin-utils/dist/polyfill-remote-file/graphql/public-url-resolver\"\n\nimport { formatLogMessage } from \"~/utils/format-log-message\"\n\nimport fetchReferencedMediaItemsAndCreateNodes, {\n  stripImageSizesFromUrl,\n} from \"../fetch-nodes/fetch-referenced-media-items\"\nimport { b64e } from \"~/utils/string-encoding\"\nimport store from \"~/store\"\n\nimport { store as gatsbyStore } from \"gatsby/dist/redux\"\n\n/**\n * Takes in a MediaItem node from WPGraphQL as well as Gatsby plugin options and returns the correct placeholder URL for GatsbyImage\n *\n * The user must set the placeholderSizeName plugin option, or otherwise create an image size in WP where the name is `gatsby-image-placeholder`\n */\nexport function getPlaceholderUrlFromMediaItemNode(node, pluginOptions) {\n  let placeholderSizeByWidth\n  let placeholderSizeByName\n\n  node.mediaDetails?.sizes?.forEach(size => {\n    if (\n      size.name ===\n      (pluginOptions?.type?.MediaItem?.placeholderSizeName ||\n        `gatsby-image-placeholder`)\n    ) {\n      placeholderSizeByName = size\n    } else if (Number(size.width) <= 20) {\n      placeholderSizeByWidth = size\n    }\n  })\n\n  const placeHolderSize = placeholderSizeByName || placeholderSizeByWidth\n\n  return placeHolderSize?.sourceUrl\n}\n\nconst findReferencedImageNodeIds = ({ nodeString, pluginOptions, node }) => {\n  // if the lazyNodes plugin option is set we don't need to find\n  // image node id's because those nodes will be fetched lazily in resolvers.\n  if (\n    pluginOptions.type.MediaItem.lazyNodes &&\n    // but not in Gatsby v4+ because lazyNodes is no longer supported\n    !usingGatsbyV4OrGreater\n  ) {\n    return []\n  }\n\n  // get an array of all referenced media file ID's\n  const matchedIds = execall(\n    /\"__typename\":\"MediaItem\",\"id\":\"([^\"]*)\"/gm,\n    nodeString\n  )\n    .map(match => match.subMatches[0])\n    .filter(id => id !== node.id)\n\n  return matchedIds\n}\n\nconst getCheerioImgDbId = cheerioImg => {\n  // try to get the db id from data attributes\n  const dataAttributeId =\n    cheerioImg.attribs[`data-id`] || cheerioImg.attribs[`data-image-id`]\n\n  if (dataAttributeId) {\n    return dataAttributeId\n  }\n\n  if (!cheerioImg.attribs.class) {\n    return null\n  }\n\n  // try to get the db id from the wp-image-id classname\n  const wpImageClass = cheerioImg.attribs.class\n    .split(` `)\n    .find(className => className.includes(`wp-image-`))\n\n  if (wpImageClass) {\n    const wpImageClassDashArray = wpImageClass.split(`-`)\n    const wpImageClassId = Number(\n      wpImageClassDashArray[wpImageClassDashArray.length - 1]\n    )\n\n    if (wpImageClassId) {\n      return wpImageClassId\n    }\n  }\n\n  return null\n}\n\n// media items are of the \"post\" type\nconst dbIdToMediaItemRelayId = dbId => (dbId ? b64e(`post:${dbId}`) : null)\n\nconst getCheerioImgRelayId = cheerioImg =>\n  dbIdToMediaItemRelayId(getCheerioImgDbId(cheerioImg))\n\nexport const ensureSrcHasHostname = ({ src, wpUrl }) => {\n  const { protocol, host } = url.parse(wpUrl)\n\n  if (src.startsWith(`/wp-content`)) {\n    src = `${protocol}//${host}${src}`\n  }\n\n  return src\n}\n\nconst pickNodeBySourceUrlOrCheerioImg = ({\n  url,\n  cheerioImg,\n  mediaItemNodes,\n}) => {\n  const possibleHtmlSrcs = [\n    // try to match the media item source url by original html src\n    url,\n    // or by the src minus any image sizes string\n    stripImageSizesFromUrl(url),\n  ]\n\n  let imageNode = mediaItemNodes.find(\n    mediaItemNode =>\n      // either find our node by the source url\n      possibleHtmlSrcs.includes(mediaItemNode.sourceUrl) ||\n      possibleHtmlSrcs.includes(\n        // try to match without -scaled in the sourceUrl as well\n        // since WP adds -scaled to image urls if they were too large\n        // at upload time but image urls in html don't have this requirement.\n        // the sourceUrl may have -scaled in it but the full size image is still\n        // stored on the server (just not in the db)\n        (mediaItemNode.sourceUrl || mediaItemNode.mediaItemUrl)?.replace(\n          `-scaled`,\n          ``\n        )\n      )\n  )\n\n  if (!imageNode && cheerioImg) {\n    imageNode = mediaItemNodes.find(\n      mediaItemNode => getCheerioImgRelayId(cheerioImg) === mediaItemNode.id\n    )\n  }\n\n  return imageNode\n}\n\nlet displayedFailedToRestoreMessage = false\n\nconst fetchNodeHtmlImageMediaItemNodes = async ({\n  // node, // for inspecting nodes while debugging\n  cheerioImages,\n  helpers,\n  wpUrl,\n}) => {\n  // get all the image nodes we've cached from elsewhere\n  const { nodeMetaByUrl } = store.getState().imageNodes\n\n  const previouslyCachedNodesByUrl = (\n    await Promise.all(\n      Object.entries(nodeMetaByUrl).map(([sourceUrl, { id } = {}]) => {\n        if (!sourceUrl || !id) {\n          return null\n        }\n\n        sourceUrl = ensureSrcHasHostname({ wpUrl, src: sourceUrl })\n\n        const existingNode = helpers.getNode(id)\n\n        if (!existingNode) {\n          if (!displayedFailedToRestoreMessage) {\n            helpers.reporter.warn(\n              formatLogMessage(\n                `File node failed to restore from cache. This is a bug in gatsby-source-wordpress. Please open an issue so we can help you out :)`\n              )\n            )\n            displayedFailedToRestoreMessage = true\n          }\n\n          return null\n        }\n\n        return {\n          sourceUrl,\n          ...existingNode,\n        }\n      })\n    )\n  ).filter(Boolean)\n\n  const mediaItemUrls = cheerioImages\n    // filter out nodes we already have\n    .filter(({ cheerioImg }) => {\n      const url = ensureSrcHasHostname({ wpUrl, src: cheerioImg.attribs.src })\n\n      const existingNode = pickNodeBySourceUrlOrCheerioImg({\n        url,\n        mediaItemNodes: previouslyCachedNodesByUrl,\n      })\n\n      return !existingNode\n    })\n    // get remaining urls\n    .map(({ cheerioImg }) => {\n      const src = ensureSrcHasHostname({\n        src: cheerioImg.attribs.src,\n        wpUrl,\n      })\n\n      return src\n    })\n\n  // build a query to fetch all media items that we don't already have\n  const mediaItemNodesBySourceUrl =\n    await fetchReferencedMediaItemsAndCreateNodes({\n      mediaItemUrls,\n    })\n  // images that have been edited from the media library that were previously\n  // uploaded to a post/page will have a different sourceUrl so they can't be fetched by it\n  // in many cases we have data-id or data-image-id as attributes on the img\n  // we can try to use those to fetch media item nodes as well\n  // this will keep us from missing nodes\n  const mediaItemDbIds = cheerioImages\n    .map(({ cheerioImg }) => getCheerioImgDbId(cheerioImg))\n    .filter(Boolean)\n\n  const mediaItemRelayIds = mediaItemDbIds\n    .map(dbId => dbIdToMediaItemRelayId(dbId))\n    .filter(\n      // filter out any media item ids we already fetched\n      relayId =>\n        ![...mediaItemNodesBySourceUrl, ...previouslyCachedNodesByUrl].find(\n          ({ id } = {}) => id === relayId\n        )\n    )\n\n  const mediaItemNodesById = await fetchReferencedMediaItemsAndCreateNodes({\n    referencedMediaItemNodeIds: mediaItemRelayIds,\n  })\n\n  const createdNodes = [...mediaItemNodesById, ...mediaItemNodesBySourceUrl]\n\n  const mediaItemNodes = [...createdNodes, ...previouslyCachedNodesByUrl]\n\n  const htmlMatchesToMediaItemNodesMap = new Map()\n  for (const { cheerioImg, match } of cheerioImages) {\n    const htmlImgSrc = ensureSrcHasHostname({\n      src: cheerioImg.attribs.src,\n      wpUrl,\n    })\n\n    const imageNode = pickNodeBySourceUrlOrCheerioImg({\n      url: htmlImgSrc,\n      cheerioImg,\n      mediaItemNodes,\n    })\n\n    cacheCreatedFileNodeBySrc({ node: imageNode, src: htmlImgSrc })\n\n    if (imageNode) {\n      // match is the html string of the img tag\n      htmlMatchesToMediaItemNodesMap.set(match, { imageNode, cheerioImg })\n    }\n  }\n\n  return htmlMatchesToMediaItemNodesMap\n}\n\nconst getCheerioElementFromMatch =\n  wpUrl =>\n  ({ match, tag = `img` }) => {\n    // unescape quotes\n    const parsedMatch = JSON.parse(`\"${match}\"`)\n\n    // load our matching img tag into cheerio\n    const $ = cheerio.load(parsedMatch, {\n      xml: {\n        // make sure it's not wrapped in <body></body>\n        withDomLvl1: false,\n        // no need to normalize whitespace, we're dealing with a single element here\n        normalizeWhitespace: false,\n        xmlMode: true,\n        // entity decoding isn't our job here, that will be the responsibility of WPGQL\n        // or of the source plugin elsewhere.\n        decodeEntities: false,\n      },\n    })\n\n    // there's only ever one element due to our match matching a single tag\n    // $(tag) isn't an array, it's an object with a key of 0\n    const cheerioElement = $(tag)[0]\n\n    if (cheerioElement?.attribs?.src?.startsWith(`/wp-content`)) {\n      cheerioElement.attribs.src = `${wpUrl}${cheerioElement.attribs.src}`\n    }\n\n    return {\n      match,\n      cheerioElement,\n      // @todo this is from when this function was just used for images\n      // remove this by refactoring\n      cheerioImg: cheerioElement,\n    }\n  }\n\nconst getCheerioElementsFromMatches = ({ imgTagMatches, wpUrl }) =>\n  imgTagMatches\n    .map(getCheerioElementFromMatch(wpUrl))\n    .filter(({ cheerioImg: { attribs } }) => {\n      if (!attribs.src) {\n        return false\n      }\n\n      return isWebUri(encodeURI(attribs.src))\n    })\n\nconst getLargestSizeFromSizesAttribute = sizesString => {\n  const sizesStringsArray = sizesString.split(`,`)\n\n  return sizesStringsArray.reduce((largest, currentSizeString) => {\n    const maxWidth = currentSizeString\n      .substring(\n        currentSizeString.indexOf(`max-width: `) + 1,\n        currentSizeString.indexOf(`px`)\n      )\n      .trim()\n\n    const maxWidthNumber = Number(maxWidth)\n    const noLargestAndMaxWidthIsANumber = !largest && !isNaN(maxWidthNumber)\n    const maxWidthIsALargerNumberThanLargest =\n      largest && !isNaN(maxWidthNumber) && maxWidthNumber > largest\n\n    if (noLargestAndMaxWidthIsANumber || maxWidthIsALargerNumberThanLargest) {\n      largest = maxWidthNumber\n    }\n\n    return largest\n  }, null)\n}\n\nconst findImgTagMaxWidthFromCheerioImg = cheerioImg => {\n  const {\n    attribs: { width, sizes },\n  } = cheerioImg || { attribs: { width: null, sizes: null } }\n\n  if (width) {\n    const widthNumber = Number(width)\n\n    if (!isNaN(widthNumber)) {\n      return widthNumber\n    }\n  }\n\n  if (sizes) {\n    const largestSize = getLargestSizeFromSizesAttribute(sizes)\n\n    if (largestSize && !isNaN(largestSize)) {\n      return largestSize\n    }\n  }\n\n  return null\n}\n\nconst getFileNodeRelativePathname = fileNode => {\n  const fileName = `${fileNode.internal.contentDigest}/${fileNode.base}`\n\n  return fileName\n}\n\nconst getFileNodePublicPath = fileNode => {\n  const fileName = getFileNodeRelativePathname(fileNode)\n\n  const publicPath = path.join(process.cwd(), `public`, `static`, fileName)\n\n  return publicPath\n}\n\nconst copyFileToStaticAndReturnUrlPath = async (fileNode, helpers) => {\n  const publicPath = getFileNodePublicPath(fileNode)\n\n  if (!fs.existsSync(publicPath)) {\n    await fs.copy(\n      fileNode.absolutePath,\n      publicPath,\n      { dereference: true },\n      err => {\n        if (err) {\n          console.error(\n            `error copying file from ${fileNode.absolutePath} to ${publicPath}`,\n            err\n          )\n        }\n      }\n    )\n  }\n\n  const fileName = getFileNodeRelativePathname(fileNode)\n\n  const relativeUrl = `${helpers.pathPrefix ?? ``}/static/${fileName}`\n\n  return relativeUrl\n}\n\nconst cacheCreatedFileNodeBySrc = ({ node, src }) => {\n  if (node) {\n    // save any fetched media items in our global media item cache\n    store.dispatch.imageNodes.pushNodeMeta({\n      sourceUrl: src,\n      id: node.id,\n      modifiedGmt: node.modifiedGmt,\n    })\n  }\n}\n\nconst imgSrcRemoteFileRegex =\n  /(?:src=\\\\\")((?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.|\\/)(?:[^'\"])*\\.(?:jpeg|jpg|png|gif|ico|mpg|ogv|svg|bmp|tif|tiff))(\\?[^\\\\\" \\.]*|)(?=\\\\\"| |\\.)/gim\n\nexport const getImgSrcRemoteFileMatchesFromNodeString = nodeString =>\n  execall(imgSrcRemoteFileRegex, nodeString).filter(({ subMatches }) => {\n    // if our match is json encoded, that means it's inside a JSON\n    // encoded string field.\n    const isInJSON = subMatches[0].includes(`\\\\/\\\\/`)\n\n    // we shouldn't process encoded JSON, so skip this match if it's JSON\n    return !isInJSON\n  })\n\nexport const getImgTagMatches = ({ nodeString }) =>\n  execall(\n    /<img([\\w\\W]+?)[\\/]?>/gim,\n    nodeString\n      // we don't want to match images inside pre\n      .replace(/<pre([\\w\\W]+?)[\\/]?>(?:(?!<\\/pre>).)+(<\\/pre>)/gim, ``)\n      // and code tags, so temporarily remove those tags and everything inside them\n      .replace(/<code([\\w\\W]+?)[\\/]?>(?:(?!<\\/code>).)+(<\\/code>)/gim, ``)\n  )\n\nexport const replaceNodeHtmlImages = async ({\n  nodeString,\n  node,\n  helpers,\n  wpUrl,\n  pluginOptions,\n}) => {\n  // this prevents fetching inline html images\n  if (\n    !pluginOptions?.html?.useGatsbyImage ||\n    pluginOptions?.type?.MediaItem?.exclude\n  ) {\n    return nodeString\n  }\n\n  const imageUrlMatches = getImgSrcRemoteFileMatchesFromNodeString(nodeString)\n\n  const imgTagMatches = getImgTagMatches({ nodeString })\n\n  if (imageUrlMatches.length && imgTagMatches.length) {\n    const cheerioImages = getCheerioElementsFromMatches({\n      imgTagMatches,\n      wpUrl,\n    })\n\n    const htmlMatchesToMediaItemNodesMap =\n      await fetchNodeHtmlImageMediaItemNodes({\n        cheerioImages,\n        nodeString,\n        node,\n        helpers,\n        pluginOptions,\n        wpUrl,\n      })\n\n    // generate gatsby images for each cheerioImage\n    const htmlMatchesWithImageResizes = await Promise.all(\n      imgTagMatches.map(async ({ match }) => {\n        const matchInfo = htmlMatchesToMediaItemNodesMap.get(match)\n\n        if (!matchInfo) {\n          return null\n        }\n\n        const { imageNode, cheerioImg } = matchInfo\n\n        const isMediaItemNode = imageNode.__typename === `MediaItem`\n\n        if (!imageNode) {\n          return null\n        }\n\n        const fileNode =\n          // if we couldn't get a MediaItem node for this image in WPGQL\n          !isMediaItemNode\n            ? // this will already be a file node\n              imageNode\n            : // otherwise grab the file node\n              helpers.getNode(imageNode?.localFile?.id)\n\n        const extension = imageNode?.mimeType?.replace(\n          `${imageNode?.mediaType}/`,\n          ``\n        )\n\n        const imgTagMaxWidth = findImgTagMaxWidthFromCheerioImg(cheerioImg)\n\n        const mediaItemNodeWidth = isMediaItemNode\n          ? imageNode?.mediaDetails?.width\n          : null\n\n        // if a max width can't be inferred from html, this value will be passed to Sharp\n        let fallbackImageMaxWidth = pluginOptions?.html?.fallbackImageMaxWidth\n\n        if (\n          // if the image is smaller than the fallback max width,\n          // the images width will be used instead if we have a media item node\n          fallbackImageMaxWidth > mediaItemNodeWidth &&\n          // of course that means we have to have a media item node\n          // and a media item node max width\n          mediaItemNodeWidth &&\n          typeof mediaItemNodeWidth === `number` &&\n          mediaItemNodeWidth > 0\n        ) {\n          fallbackImageMaxWidth = mediaItemNodeWidth\n        }\n\n        let maxWidth =\n          // if we inferred a maxwidth from html\n          (imgTagMaxWidth &&\n          // and we have a media item node to know it's full size max width\n          mediaItemNodeWidth &&\n          // and this isn't an svg which has no maximum width\n          extension !== `svg` &&\n          // and the media item node max width is smaller than what we inferred\n          // from html\n          mediaItemNodeWidth < imgTagMaxWidth\n            ? // use the media item node width\n              mediaItemNodeWidth\n            : // otherwise use the width inferred from html\n              imgTagMaxWidth) ??\n          // if we don't have a media item node and we inferred no width\n          // from html, then use the fallback max width from plugin options\n          fallbackImageMaxWidth\n\n        const configuredMaxWidth = pluginOptions?.html?.imageMaxWidth\n\n        // if the configured html.maxWidth property is less than the result, then\n        // override the resulting width\n        if (configuredMaxWidth && configuredMaxWidth < maxWidth) {\n          maxWidth = configuredMaxWidth\n        }\n\n        const quality = pluginOptions?.html?.imageQuality ?? 70\n\n        const { reporter } = helpers\n\n        const gatsbyTransformerSharpSupportsThisFileType =\n          supportedExtensions[extension] || extension === `gif`\n\n        let imageResize = null\n        let publicUrl\n\n        const imageUrl =\n          imageNode.mediaItemUrl || imageNode.sourceUrl || imageNode.url\n\n        try {\n          if (gatsbyTransformerSharpSupportsThisFileType) {\n            const placeholderUrl = getPlaceholderUrlFromMediaItemNode(\n              imageNode,\n              pluginOptions\n            )\n\n            const formats = [`auto`]\n            if (pluginOptions.html.generateWebpImages) {\n              formats.push(`webp`)\n            }\n            if (pluginOptions.html.generateAvifImages) {\n              formats.push(`avif`)\n            }\n\n            imageResize = await gatsbyImageResolver(\n              {\n                url: imageUrl,\n                placeholderUrl,\n                mimeType: imageNode.mimeType,\n                width: imageNode.mediaDetails.width,\n                height: imageNode.mediaDetails.height,\n                filename: path.basename(imageNode.mediaDetails.file),\n                internal: {\n                  contentDigest: imageNode.modifiedGmt,\n                },\n              },\n              {\n                width: maxWidth,\n                layout: `constrained`,\n                placeholder: !placeholderUrl\n                  ? `none`\n                  : pluginOptions?.html?.placeholderType || `dominantColor`,\n                quality,\n                formats,\n              },\n              helpers.actions,\n              gatsbyStore\n            )\n          } else {\n            publicUrl = publicUrlResolver(\n              {\n                url: imageUrl,\n                mimeType: imageNode.mimeType,\n                filename: path.basename(imageNode.sourceUrl || imageNode.url),\n                internal: {\n                  contentDigest: imageNode.modifiedGmt,\n                },\n              },\n              helpers.actions,\n              gatsbyStore\n            )\n          }\n        } catch (e) {\n          reporter.error(e)\n          reporter.warn(\n            formatLogMessage(\n              `${node.__typename} ${node.id} couldn't process inline html image ${imageUrl}`\n            )\n          )\n          return null\n        }\n\n        return {\n          match,\n          cheerioImg,\n          fileNode,\n          imageResize,\n          maxWidth,\n          publicUrl,\n        }\n      })\n    )\n\n    // find/replace mutate nodeString to replace matched images with rendered gatsby images\n    let replaceIndex = 0\n    for (const matchResize of htmlMatchesWithImageResizes) {\n      if (!matchResize) {\n        continue\n      }\n\n      const { match, imageResize, cheerioImg, publicUrl } = matchResize\n\n      let ReactGatsbyImage\n      // used to create hydration data for images\n      let gatsbyImageHydrationData = null\n      if (\n        imageResize &&\n        (imageResize.images.sources.length > 0 || imageResize.images.fallback)\n      ) {\n        gatsbyImageHydrationData = {\n          image: imageResize,\n          alt: cheerioImg?.attribs?.alt,\n          className: `${\n            cheerioImg?.attribs?.class || ``\n          } inline-gatsby-image-wrapper`,\n          \"data-wp-inline-image\": String(++replaceIndex),\n        }\n        ReactGatsbyImage = React.createElement(\n          GatsbyImage,\n          gatsbyImageHydrationData,\n          null\n        )\n      } else if (publicUrl) {\n        ReactGatsbyImage = React.createElement(\n          `img`,\n          {\n            src: publicUrl,\n            alt: cheerioImg?.attribs?.alt,\n            className: `${\n              cheerioImg?.attribs?.class || ``\n            } inline-gatsby-image-wrapper`,\n          },\n          null\n        )\n      }\n\n      if (ReactGatsbyImage) {\n        let gatsbyImageStringRaw =\n          ReactDOMServer.renderToString(ReactGatsbyImage)\n\n        // gatsby-plugin-image needs hydration data to work on navigations - we add the hydration data to the DOM to use it in gatsby-browser.ts\n        if (gatsbyImageHydrationData) {\n          gatsbyImageStringRaw += `<script type=\"application/json\" data-wp-inline-image-hydration=\"${replaceIndex}\">${JSON.stringify(\n            gatsbyImageHydrationData\n          )}</script>`\n        }\n        // need to remove the JSON stringify quotes around our image since we're\n        // threading this JSON string back into a larger JSON object string\n        const gatsbyImageStringJSON = JSON.stringify(gatsbyImageStringRaw)\n        const gatsbyImageString = gatsbyImageStringJSON.substring(\n          1,\n          gatsbyImageStringJSON.length - 1\n        )\n\n        nodeString = replaceAll(match, gatsbyImageString, nodeString)\n      }\n    }\n  }\n\n  return nodeString\n}\n\nconst replaceFileLinks = async ({\n  nodeString,\n  helpers,\n  wpUrl,\n  pluginOptions,\n  node,\n}) => {\n  if (\n    !pluginOptions?.html?.createStaticFiles ||\n    pluginOptions?.type?.MediaItem?.exclude\n  ) {\n    return nodeString\n  }\n\n  if (node.__typename === `MediaItem`) {\n    // we don't want to replace file links on MediaItem nodes because they're processed specially from other node types.\n    // if we replace file links here then we wont be able to properly fetch the localFile node\n    return nodeString\n  }\n\n  const hrefMatches = [\n    // match url pathnames in html fields, for ex /wp-content/uploads/2019/01/image.jpg\n    ...(execall(\n      /(\\\\\"|\\\\'|\\()([^'\"()]*)(\\/wp-content\\/uploads\\/[^'\">()]+)(\\\\\"|\\\\'|>|\\))/gm,\n      nodeString\n    ) || []),\n    // match full urls in json fields, for ex https://example.com/wp-content/uploads/2019/01/image.jpg\n    ...(execall(\n      new RegExp(\n        `(\\\\\"|\\\\'|\\\\()([^'\"()]*)(${wpUrl}\\/wp-content\\/uploads\\/[^'\">()]+)(\\\\\"|\\\\'|>|\\\\))`,\n        `gm`\n      ),\n      nodeString\n    ) || []),\n  ]\n\n  if (hrefMatches.length) {\n    // eslint-disable-next-line arrow-body-style\n    const mediaItemUrlsAndMatches = hrefMatches.map(matchGroup => {\n      const match = matchGroup.subMatches[2]\n      const url = match.startsWith(wpUrl) ? match : `${wpUrl}${match}`\n      return {\n        matchGroup,\n        url,\n      }\n    })\n\n    const mediaItemUrls = mediaItemUrlsAndMatches\n      .map(({ url }) => url)\n      .filter(isWebUri)\n\n    const mediaItemNodesBySourceUrl =\n      await fetchReferencedMediaItemsAndCreateNodes({\n        mediaItemUrls,\n      })\n\n    const findReplaceMaps = []\n\n    await Promise.all(\n      mediaItemNodesBySourceUrl.map(async node => {\n        let fileNode\n        let mediaItemNode\n\n        if (node.internal.type === `File`) {\n          fileNode = node\n          mediaItemNode = await helpers.getNode(node.parent)\n        } else if (node.localFile?.id) {\n          fileNode = await helpers.getNode(node.localFile.id)\n          mediaItemNode = node\n        } else {\n          return null\n        }\n\n        const relativeUrl = await copyFileToStaticAndReturnUrlPath(\n          fileNode,\n          helpers\n        )\n\n        if (!relativeUrl || !mediaItemNode?.mediaItemUrl || !fileNode) {\n          return null\n        }\n\n        const mediaItemMatchGroup = mediaItemUrlsAndMatches.find(\n          ({\n            matchGroup: {\n              subMatches: [, , path],\n            },\n          }) => mediaItemNode.mediaItemUrl.includes(path)\n        )?.matchGroup\n\n        if (!mediaItemMatchGroup) {\n          return null\n        }\n\n        const [, hostname, path] = mediaItemMatchGroup.subMatches\n\n        cacheCreatedFileNodeBySrc({\n          node: mediaItemNode,\n          src: `${wpUrl}${path}`,\n        })\n\n        findReplaceMaps.push({\n          find: `${hostname || ``}${path}`,\n          replace: relativeUrl,\n        })\n\n        findReplaceMaps.push({\n          find: path,\n          replace: relativeUrl,\n        })\n\n        return null\n      })\n    )\n\n    for (const { find, replace } of findReplaceMaps.filter(Boolean)) {\n      nodeString = replaceAll(find, replace, nodeString)\n    }\n  }\n\n  return nodeString\n}\n\nexport const getWpLinkRegex = wpUrl =>\n  new RegExp(\n    `[\"']${wpUrl}(?!/wp-content|/wp-admin|/wp-includes)(/[^'\"]+)[\"']`,\n    `gim`\n  )\n\n// replaces any url which is a front-end WP url with a relative path\nconst replaceNodeHtmlLinks = ({ wpUrl, nodeString, node }) => {\n  const wpLinkRegex = getWpLinkRegex(wpUrl)\n  const linkMatches = execall(wpLinkRegex, nodeString)\n\n  if (linkMatches.length) {\n    linkMatches.forEach(({ match, subMatches: [path] }) => {\n      if (path) {\n        try {\n          // remove \\, \" and ' characters from match\n          const normalizedMatch = match\n            .replace(/['\"\\\\]/g, ``)\n            // ensure that query params are properly quoted\n            .replace(/\\?/, `\\\\?`)\n\n          const normalizedPath = path.replace(/\\\\/g, ``)\n\n          // replace normalized match with relative path\n          const thisMatchRegex = new RegExp(\n            normalizedMatch + `(?!/?wp-content|/?wp-admin|/?wp-includes)`,\n            `g`\n          )\n\n          nodeString = nodeString.replace(thisMatchRegex, normalizedPath)\n        } catch (e) {\n          console.error(e)\n          console.warn(\n            formatLogMessage(\n              `Failed to process inline html links in ${node.__typename} ${node.id}`\n            )\n          )\n        }\n      }\n    })\n  }\n\n  return nodeString\n}\n\n// replaces specific string or regex with a given string from the plugin options config\nexport const searchAndReplaceNodeStrings = ({\n  nodeString,\n  node,\n  pluginOptions,\n}) => {\n  if (Array.isArray(pluginOptions?.searchAndReplace)) {\n    pluginOptions.searchAndReplace.forEach(({ search, replace }) => {\n      const searchRegex = new RegExp(search, `g`)\n\n      const stringMatches = execall(searchRegex, nodeString)\n\n      if (stringMatches.length) {\n        stringMatches.forEach(({ match }) => {\n          if (match) {\n            try {\n              nodeString = nodeString.replace(search, replace)\n            } catch (e) {\n              console.error(e)\n              console.warn(\n                formatLogMessage(\n                  `Failed to process search and replace string in ${node.__typename} ${node.id}`\n                )\n              )\n            }\n          }\n        })\n      }\n    })\n  }\n\n  return nodeString\n}\n\nconst processNodeString = async ({\n  nodeString,\n  node,\n  pluginOptions,\n  helpers,\n  wpUrl,\n}) => {\n  const nodeStringFilters = [\n    searchAndReplaceNodeStrings,\n    replaceNodeHtmlImages,\n    replaceFileLinks,\n    replaceNodeHtmlLinks,\n  ]\n\n  for (const nodeStringFilter of nodeStringFilters) {\n    nodeString = await nodeStringFilter({\n      nodeString,\n      node,\n      pluginOptions,\n      helpers,\n      wpUrl,\n    })\n  }\n\n  return nodeString\n}\n\nconst processNode = async ({\n  node,\n  pluginOptions,\n  wpUrl,\n  helpers,\n  referencedMediaItemNodeIds,\n}) => {\n  const nodeString = stringify(node)\n\n  // find referenced node ids\n  // here we're searching for node id strings in our node\n  // we use this to download only the media items\n  // that are being used in posts\n  // this is important for downloading images nodes that are connected somewhere\n  // on a node field\n  const nodeMediaItemIdReferences = findReferencedImageNodeIds({\n    nodeString,\n    pluginOptions,\n    node,\n  })\n\n  // push them to our store of referenced id's\n  if (nodeMediaItemIdReferences?.length && referencedMediaItemNodeIds) {\n    nodeMediaItemIdReferences.forEach(id => referencedMediaItemNodeIds.add(id))\n  }\n\n  const processedNodeString = await processNodeString({\n    nodeString,\n    node,\n    pluginOptions,\n    helpers,\n    wpUrl,\n  })\n\n  const processedNode =\n    // only parse if the nodeString has changed\n    processedNodeString !== nodeString ? JSON.parse(processedNodeString) : node\n\n  return {\n    processedNode,\n    nodeMediaItemIdReferences,\n  }\n}\n\nexport { processNode }\n"],"mappings":"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"}