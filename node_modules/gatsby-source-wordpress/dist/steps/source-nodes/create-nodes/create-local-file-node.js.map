{"version":3,"file":"create-local-file-node.js","names":["getFileNodeMetaBySourceUrl","sourceUrl","fileNodesMetaByUrls","store","getState","imageNodes","nodeMetaByUrl","stripImageSizesFromUrl","getMediaItemEditLink","node","helpers","pluginOptions","gatsbyApi","protocol","hostname","url","parse","link","baseUrl","databaseId","parentNode","parentHtmlNode","getNode","id","errorPanicker","error","reporter","fetchState","parentName","editUrl","stepMessage","mediaItemLink","editLink","fileUrl","mediaItemUrl","sharedError","errorString","toString","allow404ImagesInProduction","production","allow404Images","allow401ImagesInProduction","allow401Images","errorCodeIs404","includes","errorCodeIs401","errorCode","process","env","NODE_ENV","shouldBail","log","warn","formatLogMessage","info","panic","bold","join","console","getFileNodeByMediaItemNode","mediaItemNode","modifiedGmt","existingNodeMeta","internal","type","localFile","failedImageUrls","Set","createLocalFileNode","skipExistingNode","state","existingNode","gatsbyStore","cache","createNodeId","actions","createNode","mimeType","title","fileSize","has","wpUrl","remoteSchema","ensureSrcHasHostname","src","excludeByMimeTypes","maxFileSizeBytes","MediaItem","dispatch","postBuildWarningCounts","incrementMaxFileSizeBytesExceeded","incrementMimeTypeExceeded","hardCachedFileRelativePath","urlToPath","hardCachedMediaFilesDirectory","cwd","hardCachedFilePath","hardCacheMediaFiles","develop","createFileNodeRequirements","parentNodeId","remoteFileNode","buffer","fs","readFile","createFileNodeFromBuffer","name","ext","path","extname","e","retry","add","wpUrlHostname","mediaItemHostname","htaccessCredentials","auth","htaccess","shouldUseHtaccessCredentials","htaccess_pass","password","htaccess_user","username","createRemoteFileNode","retries","factor","minTimeout","onRetry","pushNodeMeta","ensureDir","dirname","copyFile","absolutePath"],"sources":["../../../../src/steps/source-nodes/create-nodes/create-local-file-node.js"],"sourcesContent":["import fs from \"fs-extra\"\nimport path from \"path\"\nimport url from \"url\"\nimport { bold } from \"chalk\"\n\nimport retry from \"async-retry\"\n\nimport { createFileNodeFromBuffer } from \"gatsby-source-filesystem\"\n\nimport createRemoteFileNode from \"./create-remote-file-node/index\"\n\nimport store from \"~/store\"\n\nimport urlToPath from \"~/utils/url-to-path\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { stripImageSizesFromUrl } from \"~/steps/source-nodes/fetch-nodes/fetch-referenced-media-items\"\nimport { ensureSrcHasHostname } from \"./process-node\"\n\nexport const getFileNodeMetaBySourceUrl = sourceUrl => {\n  const fileNodesMetaByUrls = store.getState().imageNodes.nodeMetaByUrl\n\n  return fileNodesMetaByUrls[stripImageSizesFromUrl(sourceUrl)]\n}\n\nexport const getMediaItemEditLink = node => {\n  const { helpers, pluginOptions } = store.getState().gatsbyApi\n\n  const { protocol, hostname } = url.parse(node?.link || pluginOptions.url)\n  const baseUrl = `${protocol}//${hostname}`\n\n  const databaseId = node.databaseId\n\n  if (!databaseId) {\n    const parentNode = node.parentHtmlNode || helpers.getNode(node.id)\n\n    if (!parentNode?.databaseId) {\n      return null\n    }\n\n    return `${baseUrl}/wp-admin/post.php?post=${parentNode.databaseId}&action=edit`\n  }\n\n  return `${baseUrl}/wp-admin/upload.php?item=${node.databaseId}`\n}\n\nexport const errorPanicker = ({\n  error,\n  reporter,\n  node,\n  fetchState,\n  parentName,\n}) => {\n  const editUrl = getMediaItemEditLink(node)\n\n  const stepMessage = parentName ? ` in step:\\n\\n\"${parentName}\"` : ``\n  const mediaItemLink = node.link ? `\\nMedia item link: ${node.link}` : ``\n  const editLink = `\\nEdit link: ${editUrl || `N/A`}`\n  const fileUrl = `\\nFile url: ${node.mediaItemUrl}`\n\n  const sharedError = `occurred while fetching media item${\n    node.databaseId ? ` #${node.databaseId}` : ``\n  }${stepMessage}\\n${mediaItemLink}${editLink}${fileUrl}`\n\n  const errorString =\n    typeof error === `string` ? error : error && error.toString()\n\n  const { pluginOptions } = store.getState().gatsbyApi\n  const allow404ImagesInProduction = pluginOptions.production.allow404Images\n  const allow401ImagesInProduction = pluginOptions.production.allow401Images\n  const errorCodeIs404 = errorString.includes(`Response code 404`)\n  const errorCodeIs401 = errorString.includes(`Response code 401`)\n  const errorCode = errorCodeIs404 ? `404` : errorCodeIs401 ? `401` : null\n\n  if (\n    (allow404ImagesInProduction ||\n      allow401ImagesInProduction ||\n      process.env.NODE_ENV !== `production`) &&\n    (errorCodeIs404 || errorCodeIs401)\n  ) {\n    fetchState.shouldBail = true\n\n    reporter.log(``)\n    reporter.warn(\n      formatLogMessage(\n        `Error ${sharedError}${\n          !allow404ImagesInProduction || !allow401ImagesInProduction\n            ? `\\n\\nThis error will fail production builds.`\n            : ``\n        }`\n      )\n    )\n    reporter.log(``)\n\n    return\n  }\n\n  if (errorString.includes(`Response code 4`)) {\n    reporter.log(``)\n\n    reporter.info(\n      formatLogMessage(\n        `Unrecoverable error ${sharedError}\\n\\nFailing the build to prevent deploying a broken site.${\n          errorCode\n            ? `\\n\\nIf you don't want ${errorCode}'s to fail your production builds, you can set the following option:\n\n{\n  options: {\n    production: {\n      allow${errorCode}Images: true\n    }\n  }\n}`\n            : ``\n        }`\n      )\n    )\n    reporter.panic(error)\n  } else if (errorString.includes(`Response code 5`)) {\n    reporter.log(``)\n    reporter.info(\n      formatLogMessage(\n        [\n          `Unrecoverable error ${sharedError}`,\n          `\\nYour wordpress host appears to be overloaded by our requests for images`,\n          `\\nIn ${bold(`gatsby-config.js`)}, try lowering the ${bold(\n            `requestConcurrency`\n          )} for MediaItems:`,\n          `\\nplugins: [\n  {\n    resolve: 'gatsby-source-wordpress',\n    options: {\n      url: 'https://mysite.com/graphql',\n      type: {\n        MediaItem: {\n          localFile: {\n            requestConcurrency: 50\n          }\n        }\n      }\n    },\n  }\n]`,\n          `\\nnote that GATSBY_CONCURRENT_REQUEST environment variable has been retired for these options`,\n        ].join(`\\n`)\n      )\n    )\n    reporter.panic(error)\n  } else {\n    console.error(error)\n    reporter.panic()\n  }\n}\n\nexport const getFileNodeByMediaItemNode = async ({\n  mediaItemNode,\n  helpers,\n}) => {\n  const { sourceUrl, modifiedGmt, mediaItemUrl, databaseId } = mediaItemNode\n\n  const fileUrl = sourceUrl || mediaItemUrl\n\n  if (!fileUrl) {\n    helpers.reporter.warn(\n      formatLogMessage(`Couldn't find source url for media item #${databaseId}`)\n    )\n    return null\n  }\n\n  const existingNodeMeta = getFileNodeMetaBySourceUrl(fileUrl)\n\n  if (\n    // if we already have this image\n    existingNodeMeta &&\n    existingNodeMeta.id &&\n    // and it hasn't been modified\n    existingNodeMeta.modifiedGmt === modifiedGmt\n  ) {\n    let node = await helpers.getNode(existingNodeMeta.id)\n\n    // some of the cached node metas don't necessarily need to be a File\n    // so make sure we return a File node if what we get isn't one\n    if (node && node.internal && node.internal.type !== `File`) {\n      if (node.localFile && node.localFile.id) {\n        // look up the corresponding file node\n        node = await helpers.getNode(node.localFile.id)\n      } else {\n        return null\n      }\n    }\n\n    return node\n  }\n\n  return null\n}\n\nconst failedImageUrls = new Set()\n\nexport const createLocalFileNode = async ({\n  mediaItemNode,\n  parentName,\n  skipExistingNode = false,\n}) => {\n  const state = store.getState()\n  const { helpers, pluginOptions } = state.gatsbyApi\n\n  const existingNode = !skipExistingNode\n    ? await getFileNodeByMediaItemNode({\n        mediaItemNode,\n        helpers,\n      })\n    : null\n\n  if (existingNode) {\n    return existingNode\n  }\n\n  const {\n    store: gatsbyStore,\n    cache,\n    createNodeId,\n    reporter,\n    actions: { createNode },\n  } = helpers\n\n  let { mediaItemUrl, modifiedGmt, mimeType, title, fileSize } = mediaItemNode\n\n  if (!mediaItemUrl || failedImageUrls.has(mediaItemUrl)) {\n    return null\n  }\n\n  const { wpUrl } = state.remoteSchema\n  mediaItemUrl = ensureSrcHasHostname({ wpUrl, src: mediaItemUrl })\n\n  const { excludeByMimeTypes, maxFileSizeBytes } =\n    // eslint-disable-next-line no-unsafe-optional-chaining\n    pluginOptions.type?.MediaItem?.localFile\n\n  // if this file is larger than maxFileSizeBytes, don't fetch the remote file\n  if (fileSize > maxFileSizeBytes) {\n    store.dispatch.postBuildWarningCounts.incrementMaxFileSizeBytesExceeded()\n    return null\n  }\n\n  // if this type of file is excluded, don't fetch the remote file\n  if (excludeByMimeTypes.includes(mimeType)) {\n    store.dispatch.postBuildWarningCounts.incrementMimeTypeExceeded()\n    return null\n  }\n\n  const hardCachedFileRelativePath = urlToPath(mediaItemUrl)\n  const hardCachedMediaFilesDirectory = `${process.cwd()}/.wordpress-cache`\n\n  const hardCachedFilePath =\n    hardCachedMediaFilesDirectory + hardCachedFileRelativePath\n\n  const hardCacheMediaFiles =\n    (process.env.NODE_ENV === `development` &&\n      pluginOptions.develop.hardCacheMediaFiles) ||\n    (process.env.NODE_ENV === `production` &&\n      pluginOptions.production.hardCacheMediaFiles)\n\n  const fetchState = {\n    shouldBail: false,\n  }\n\n  const createFileNodeRequirements = {\n    parentNodeId: mediaItemNode.id,\n    store: gatsbyStore,\n    cache,\n    createNode,\n    createNodeId,\n  }\n\n  let remoteFileNode\n\n  if (hardCacheMediaFiles) {\n    // check for file in .wordpress-cache/wp-content\n    // if it exists, use that to create a node from instead of\n    // fetching from wp\n    try {\n      const buffer = await fs.readFile(hardCachedFilePath)\n      remoteFileNode = await createFileNodeFromBuffer({\n        buffer,\n        name: title,\n        ext: path.extname(mediaItemUrl),\n        ...createFileNodeRequirements,\n      })\n    } catch (e) {\n      // ignore errors, we'll download the image below if it doesn't exist\n    }\n  }\n\n  if (!remoteFileNode) {\n    // Otherwise we need to download it\n    remoteFileNode = await retry(\n      async () => {\n        if (fetchState.shouldBail) {\n          failedImageUrls.add(mediaItemUrl)\n          return null\n        }\n\n        const { hostname: wpUrlHostname } = url.parse(wpUrl)\n        const { hostname: mediaItemHostname } = url.parse(mediaItemUrl)\n\n        const htaccessCredentials = pluginOptions.auth.htaccess\n\n        // if media items are hosted on another url like s3,\n        // using the htaccess creds will throw 400 errors\n        const shouldUseHtaccessCredentials = wpUrlHostname === mediaItemHostname\n\n        const auth =\n          htaccessCredentials && shouldUseHtaccessCredentials\n            ? {\n                htaccess_pass: htaccessCredentials?.password,\n                htaccess_user: htaccessCredentials?.username,\n              }\n            : null\n\n        // if this errors, it's caught one level above in fetch-referenced-media-items.js so it can be placed on the end of the request queue\n        const node = await createRemoteFileNode({\n          url: mediaItemUrl,\n          auth,\n          ...createFileNodeRequirements,\n          reporter,\n          pluginOptions,\n        })\n\n        return node\n      },\n      {\n        retries: 3,\n        factor: 1.1,\n        minTimeout: 5000,\n        onRetry: error =>\n          errorPanicker({\n            error,\n            reporter,\n            node: mediaItemNode,\n            fetchState,\n            parentName,\n          }),\n      }\n    )\n  }\n\n  if (!remoteFileNode) {\n    return null\n  }\n\n  // push it's id and url to our store for caching,\n  // so we can touch this node next time\n  // and so we can easily access the id by source url later\n  store.dispatch.imageNodes.pushNodeMeta({\n    id: remoteFileNode.id,\n    sourceUrl: mediaItemUrl,\n    modifiedGmt,\n  })\n\n  if (hardCacheMediaFiles) {\n    try {\n      // make sure the directory exists\n      await fs.ensureDir(path.dirname(hardCachedFilePath))\n      // copy our downloaded file to our existing directory\n      await fs.copyFile(remoteFileNode.absolutePath, hardCachedFilePath)\n    } catch (e) {\n      helpers.reporter.panic(e)\n    }\n  }\n\n  // and use it\n  return remoteFileNode\n}\n"],"mappings":"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"}