{"version":3,"file":"content-update-interval.js","names":["checkForNodeUpdates","cache","emitter","store","dispatch","develop","pauseRefreshPolling","lastCompletedSourceTime","get","LAST_COMPLETED_SOURCE_TIME","since","data","actionMonitorActions","nodes","newActions","fetchGraphql","query","contentPollingQuery","variables","throwGqlErrors","throwFetchErrors","length","emit","webhookBody","refreshing","pluginName","set","Date","now","resumeRefreshPolling","refetcher","msRefetchInterval","helpers","reconnectionActivity","retryCount","refreshPollingIsPaused","getState","end","reporter","success","formatLogMessage","e","pluginOptions","getGatsbyApi","debug","throwRefetchErrors","activityTimer","message","start","setStatus","retryTime","maxWait","waitFor","Promise","resolve","setTimeout","startedPolling","firstCompilationDone","startPollingForContentUpdates","process","env","WP_DISABLE_POLLING","ENABLE_GATSBY_REFRESH_ENDPOINT","verbose","gatsbyApi","nodeUpdateInterval","on","log","info"],"sources":["../../../../src/steps/source-nodes/update-nodes/content-update-interval.js"],"sourcesContent":["import { formatLogMessage } from \"~/utils/format-log-message\"\nimport store from \"~/store\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { contentPollingQuery } from \"../../../utils/graphql-queries\"\nimport fetchGraphql from \"../../../utils/fetch-graphql\"\nimport { LAST_COMPLETED_SOURCE_TIME } from \"../../../constants\"\n\n/**\n * This function checks wether there is atleast 1 WPGatsby action ready to be processed by Gatsby\n * If there is, it calls the refresh webhook so that schema customization and source nodes run again.\n */\nconst checkForNodeUpdates = async ({ cache, emitter }) => {\n  // pause polling until we know wether or not there are new actions\n  // if there aren't any we will unpause below, if there are some we will unpause\n  // at the end of sourceNodes (triggered by WEBHOOK_RECEIVED below)\n  store.dispatch.develop.pauseRefreshPolling()\n\n  // get the last sourced time\n  const lastCompletedSourceTime = await cache.get(LAST_COMPLETED_SOURCE_TIME)\n  const since = lastCompletedSourceTime - 500\n\n  // make a graphql request for any actions that have happened since\n  const {\n    data: {\n      actionMonitorActions: { nodes: newActions },\n    },\n  } = await fetchGraphql({\n    query: contentPollingQuery,\n    variables: {\n      since,\n    },\n    // throw fetch errors and graphql errors so we can auto recover in refetcher()\n    throwGqlErrors: true,\n    throwFetchErrors: true,\n  })\n\n  if (newActions.length) {\n    emitter.emit(`WEBHOOK_RECEIVED`, {\n      webhookBody: {\n        since,\n        refreshing: true,\n      },\n      pluginName: `gatsby-source-wordpress`,\n    })\n  } else {\n    // set new last completed source time and move on\n    await cache.set(LAST_COMPLETED_SOURCE_TIME, Date.now())\n    store.dispatch.develop.resumeRefreshPolling()\n  }\n}\n\nconst refetcher = async (\n  msRefetchInterval,\n  helpers,\n  { reconnectionActivity = null, retryCount = 1 } = {}\n) => {\n  try {\n    const { refreshPollingIsPaused } = store.getState().develop\n\n    if (!refreshPollingIsPaused) {\n      await checkForNodeUpdates(helpers)\n    }\n\n    if (reconnectionActivity) {\n      reconnectionActivity.end()\n      helpers.reporter.success(\n        formatLogMessage(\n          `Content updates re-connected after ${retryCount} ${\n            retryCount === 1 ? `try` : `tries`\n          }`\n        )\n      )\n\n      reconnectionActivity = null\n      retryCount = 1\n    }\n  } catch (e) {\n    const { pluginOptions } = getGatsbyApi()\n    if (pluginOptions?.debug?.throwRefetchErrors) {\n      throw e\n    }\n\n    if (!reconnectionActivity) {\n      reconnectionActivity = helpers.reporter.activityTimer(\n        formatLogMessage(`Content update error: \"${e.message}\"`)\n      )\n      reconnectionActivity.start()\n      reconnectionActivity.setStatus(`retrying...`)\n    } else {\n      retryCount++\n      reconnectionActivity.setStatus(`retried ${retryCount} times`)\n    }\n\n    // retry after retry count times 5 seconds\n    const retryTime = retryCount * 5000\n    // if the retry time is greater than or equal to the max (60 seconds)\n    // use the max, otherwise use the retry time\n    const maxWait = 60000\n    const waitFor = retryTime >= maxWait ? maxWait : retryTime\n\n    await new Promise(resolve => setTimeout(resolve, waitFor))\n  }\n\n  setTimeout(\n    () =>\n      refetcher(msRefetchInterval, helpers, {\n        reconnectionActivity,\n        retryCount,\n      }),\n    msRefetchInterval\n  )\n}\n\nlet startedPolling = false\nlet firstCompilationDone = false\n\n/**\n * Starts constantly refetching the latest WordPress changes\n * so we can update Gatsby nodes when data changes\n */\nconst startPollingForContentUpdates = helpers => {\n  if (\n    startedPolling ||\n    process.env.WP_DISABLE_POLLING ||\n    process.env.ENABLE_GATSBY_REFRESH_ENDPOINT\n  ) {\n    return\n  }\n\n  startedPolling = true\n\n  const { verbose, develop } = store.getState().gatsbyApi.pluginOptions\n\n  const msRefetchInterval = develop.nodeUpdateInterval\n\n  helpers.emitter.on(`COMPILATION_DONE`, () => {\n    /**\n     * we only want to start our refetcher helper 1 time after the first COMPILATION_DONE event.\n     * This event happens when the dev server is ready. It also happens after saving a code change. We only want to run our code 1 time.\n     * onCreateDevServer (the node API we're hooking into) is called before the dev server is ready.\n     * Running our logic at that point is problematic because we could end up triggering the WEBHOOK_RECEIVED event before the dev server is ready and this can cause Gatsby to throw errors. So we're hooking into COMPILATION_DONE to avoid that problem.\n     */\n    if (!firstCompilationDone) {\n      firstCompilationDone = true\n\n      // wait a second so that terminal output is more smooth\n      setTimeout(() => {\n        if (verbose) {\n          helpers.reporter.log(``)\n          helpers.reporter.info(\n            formatLogMessage`Watching for WordPress changes`\n          )\n        }\n\n        refetcher(msRefetchInterval, helpers)\n      }, 1000)\n    }\n  })\n}\n\nexport { startPollingForContentUpdates }\n"],"mappings":"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"}