{"version":3,"file":"fetch-referenced-media-items.js","names":["nodeFetchConcurrency","concurrency","Number","process","env","GATSBY_CONCURRENT_DOWNLOAD","adjustedConcurrency","normalizedConcurrency","mediaFileFetchQueue","PQueue","carryoverConcurrencyCount","mediaNodeFetchQueue","previouslyRetriedPromises","pushPromiseOntoRetryQueue","node","helpers","createContentDigest","actions","queue","retryKey","retryPromise","add","timesRetried","Promise","resolve","setTimeout","error","reporter","info","panic","addImageCDNFieldsToNode","pluginOptions","__typename","includes","placeholderUrl","getPlaceholderUrlFromMediaItemNode","url","sourceUrl","mediaItemUrl","filename","mediaDetails","file","split","pop","path","basename","urlUtil","parse","pathname","contentType","mimeType","filesize","fileSize","width","height","sizes","createMediaItemNode","parentName","allMediaItemNodes","existingNode","getNode","id","store","dispatch","logger","incrementActivityTimer","typeName","by","push","resolveFutureNode","futureNode","fetchTimeout","log","formatLogMessage","getPluginOptions","createFileNodes","type","MediaItem","localFileNode","createLocalFileNode","mediaItemNode","clearTimeout","parent","internal","contentDigest","buildTypeName","localFile","normalizedNode","normalizeNode","nodeTypeName","createNode","urlToFileExtension","fileExtension","extname","stripImageSizesFromUrl","imageSizesPattern","RegExp","urlWithoutSizes","replace","createScaledImageUrl","isAlreadyScaled","scaledUrl","processAndDedupeImageUrls","urls","uniq","reduce","accumulator","strippedUrl","scaledStrippedUrl","fetchMediaItemsBySourceUrl","mediaItemUrls","selectionSet","builtFragments","processedMediaItemUrls","cachedMediaItemNodeIds","uncachedMediaItemUrls","getFileNodeMetaBySourceUrl","previouslyCachedMediaItemNodes","all","map","nodeId","parentNode","schema","perPage","mediaItemUrlsPages","chunk","length","allPromises","index","sourceUrls","entries","curPromise","join","query","data","fetchGraphql","variables","first","after","errorContext","thisPagesNodes","Object","values","filter","Boolean","nodes","forEach","imageNodes","pushNodeMeta","modifiedGmt","onIdle","allResults","flat","fetchMediaItemsById","mediaItemIds","settings","typeInfo","newMediaItemIds","chunkedIds","relayIds","ids","atob","slice","allNodesOfContentType","paginatedWpNodeFetch","contentTypePlural","pluralName","nodesTypeName","in","throwFetchErrors","referencedMediaItemNodeIds","fetchReferencedMediaItemsAndCreateNodes","state","getState","queryInfo","remoteSchema","nodeQueries","mediaItems","gatsbyApi","exclude","createdNodes","nodesSourcedById","nodesSourcedByUrl"],"sources":["../../../../src/steps/source-nodes/fetch-nodes/fetch-referenced-media-items.js"],"sourcesContent":["import chunk from \"lodash/chunk\"\nimport store from \"~/store\"\nimport atob from \"atob\"\nimport filesize from \"filesize\"\nimport PQueue from \"p-queue\"\nimport { createLocalFileNode } from \"../create-nodes/create-local-file-node\"\nimport { paginatedWpNodeFetch, normalizeNode } from \"./fetch-nodes-paginated\"\nimport { buildTypeName } from \"~/steps/create-schema-customization/helpers\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { getFileNodeMetaBySourceUrl } from \"~/steps/source-nodes/create-nodes/create-local-file-node\"\nimport uniq from \"lodash/uniq\"\nimport urlUtil from \"url\"\nimport path from \"path\"\nimport { getPluginOptions } from \"~/utils/get-gatsby-api\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { getPlaceholderUrlFromMediaItemNode } from \"../create-nodes/process-node\"\n\nconst nodeFetchConcurrency = 2\n\nconst concurrency = Number(process.env.GATSBY_CONCURRENT_DOWNLOAD ?? 200)\nconst adjustedConcurrency = Number(concurrency ?? 200) - nodeFetchConcurrency\nconst normalizedConcurrency =\n  adjustedConcurrency <= nodeFetchConcurrency\n    ? concurrency\n    : adjustedConcurrency\n\nconst mediaFileFetchQueue = new PQueue({\n  concurrency: normalizedConcurrency,\n  carryoverConcurrencyCount: true,\n})\n\nconst mediaNodeFetchQueue = new PQueue({\n  concurrency: nodeFetchConcurrency,\n  carryoverConcurrencyCount: true,\n})\n\nconst previouslyRetriedPromises = {}\n\nconst pushPromiseOntoRetryQueue = ({\n  node,\n  helpers,\n  createContentDigest,\n  actions,\n  queue,\n  retryKey,\n  retryPromise,\n}) => {\n  queue.add(async () => {\n    const timesRetried = previouslyRetriedPromises[retryKey] || 0\n\n    if (timesRetried >= 2) {\n      // if we've retried this more than once, pause for a sec.\n      await new Promise(resolve =>\n        setTimeout(() => resolve(), timesRetried * 500)\n      )\n    }\n\n    try {\n      await retryPromise({\n        createContentDigest,\n        actions,\n        helpers,\n        node,\n        queue,\n        retryKey,\n        retryPromise,\n        timesRetried,\n      })\n    } catch (error) {\n      // Errors that should exit are handled one level down\n      // in createLocalFileNode\n      //\n      // if we haven't reqeued this before,\n      // add it to the end of the queue to\n      // try once more later\n      if (timesRetried < 5) {\n        if (timesRetried > 1) {\n          helpers.reporter.info(\n            `pushing ${retryKey} to the end of the request queue.`\n          )\n\n          helpers.reporter.info(\n            `Previously retried ${timesRetried} times already.`\n          )\n        }\n\n        previouslyRetriedPromises[retryKey] = timesRetried + 1\n\n        pushPromiseOntoRetryQueue({\n          node,\n          helpers,\n          createContentDigest,\n          actions,\n          queue,\n          retryKey,\n          retryPromise,\n        })\n      } else {\n        helpers.reporter.info(\n          `\\n\\nalready re-queued ${retryKey} 5 times :( sorry.\\nTry lowering process.env.GATSBY_CONCURRENT_DOWNLOAD.\\nIt's currently set to ${process.env.GATSBY_CONCURRENT_DOWNLOAD}\\n\\n`\n        )\n        // we already tried this earlier in the queue\n        // no choice but to give up :(\n        helpers.reporter.panic(error)\n      }\n    }\n  })\n}\n\nexport const addImageCDNFieldsToNode = (node, pluginOptions) => {\n  if (!node?.__typename?.includes(`MediaItem`)) {\n    return node\n  }\n\n  const placeholderUrl = getPlaceholderUrlFromMediaItemNode(node, pluginOptions)\n\n  const url = node.sourceUrl || node.mediaItemUrl\n\n  const filename =\n    node?.mediaDetails?.file?.split(`/`)?.pop() ||\n    path.basename(urlUtil.parse(url).pathname)\n\n  return {\n    ...node,\n    url,\n    contentType: node.contentType,\n    mimeType: node.mimeType,\n    filename,\n    filesize: node?.mediaDetails?.fileSize,\n    width: node?.mediaDetails?.width,\n    height: node?.mediaDetails?.height,\n    placeholderUrl:\n      placeholderUrl ?? node?.mediaDetails?.sizes?.[0]?.sourceUrl ?? url,\n  }\n}\n\nexport const createMediaItemNode = async ({\n  node,\n  helpers,\n  createContentDigest,\n  actions,\n  parentName,\n  allMediaItemNodes = [],\n}) => {\n  const existingNode = await helpers.getNode(node.id)\n\n  if (existingNode) {\n    return existingNode\n  }\n\n  store.dispatch.logger.incrementActivityTimer({\n    typeName: `MediaItem`,\n    by: 1,\n  })\n\n  allMediaItemNodes.push(node)\n\n  let resolveFutureNode\n  const futureNode = new Promise(resolve => {\n    resolveFutureNode = resolve\n  })\n\n  pushPromiseOntoRetryQueue({\n    node,\n    helpers,\n    createContentDigest,\n    actions,\n    queue: mediaFileFetchQueue,\n    retryKey: node.mediaItemUrl,\n    retryPromise: async ({\n      createContentDigest,\n      actions,\n      helpers,\n      node,\n      retryKey,\n      timesRetried,\n    }) => {\n      const fetchTimeout = setTimeout(() => {\n        helpers.reporter.log(\n          formatLogMessage(\n            `Fetching ${\n              node.mediaItemUrl\n            } is taking a long time time (longer than 15 seconds). This file is ${filesize(\n              node.fileSize\n            )}`\n          )\n        )\n      }, 15000)\n\n      const pluginOptions = getPluginOptions()\n\n      const { createFileNodes } = pluginOptions.type.MediaItem\n\n      const localFileNode = createFileNodes\n        ? await createLocalFileNode({\n            mediaItemNode: node,\n            helpers,\n            parentName,\n          })\n        : null\n\n      clearTimeout(fetchTimeout)\n\n      if (timesRetried > 1) {\n        helpers.reporter.info(\n          `Successfully fetched ${retryKey} after retrying ${timesRetried} times`\n        )\n      }\n\n      node = addImageCDNFieldsToNode(\n        {\n          ...node,\n          parent: null,\n          internal: {\n            contentDigest: createContentDigest(node),\n            type: buildTypeName(`MediaItem`),\n          },\n        },\n        pluginOptions\n      )\n\n      if (localFileNode?.id) {\n        node.localFile = {\n          id: localFileNode?.id,\n        }\n      }\n\n      const normalizedNode = normalizeNode({ node, nodeTypeName: `MediaItem` })\n\n      await actions.createNode(normalizedNode)\n      return resolveFutureNode(node)\n    },\n  })\n\n  return futureNode\n}\n\nconst urlToFileExtension = url => {\n  const { pathname } = urlUtil.parse(url)\n\n  const fileExtension = path.extname(pathname)\n\n  return fileExtension\n}\n\nexport const stripImageSizesFromUrl = url => {\n  const fileExtension = urlToFileExtension(url)\n\n  const imageSizesPattern = new RegExp(\n    // eslint-disable-next-line no-useless-escape\n    `(?:[-_]([0-9]+)x([0-9]+))${fileExtension ? `\\.${fileExtension}` : ``}`\n  )\n\n  let urlWithoutSizes = url.replace(imageSizesPattern, ``)\n\n  if (urlWithoutSizes !== url && fileExtension) {\n    urlWithoutSizes = `${urlWithoutSizes}${fileExtension}`\n  }\n\n  return urlWithoutSizes\n}\n\nconst createScaledImageUrl = url => {\n  const fileExtension = urlToFileExtension(url)\n\n  const isAlreadyScaled = url.includes(`-scaled${fileExtension || ``}`)\n\n  if (isAlreadyScaled) {\n    return url\n  }\n\n  let scaledUrl\n\n  if (fileExtension) {\n    scaledUrl = url.replace(fileExtension, `-scaled${fileExtension}`)\n  } else {\n    scaledUrl = `${url}-scaled`\n  }\n\n  return scaledUrl\n}\n\n// takes an array of image urls and returns them + additional urls if\n// any of the provided image urls contain what appears to be an image resize signifier\n// for ex https://site.com/wp-content/uploads/01/your-image-500x1000.jpeg\n// that will add https://site.com/wp-content/uploads/01/your-image.jpeg to the array\n// this is necessary because we can only get image nodes by the full source url.\n// simply removing image resize signifiers from all urls would be a mistake since\n// someone could upload a full-size image that contains that pattern - so the full\n// size url would have 500x1000 in it, and removing it would make it so we can never\n// fetch this image node.\nconst processAndDedupeImageUrls = urls =>\n  uniq(\n    urls.reduce((accumulator, url) => {\n      const scaledUrl = createScaledImageUrl(url)\n      accumulator.push(scaledUrl)\n\n      const strippedUrl = stripImageSizesFromUrl(url)\n\n      // if the url had no image sizes, don't do anything special\n      if (strippedUrl === url) {\n        return accumulator\n      }\n\n      accumulator.push(strippedUrl)\n\n      const scaledStrippedUrl = createScaledImageUrl(strippedUrl)\n      accumulator.push(scaledStrippedUrl)\n\n      return accumulator\n    }, urls)\n  )\n\nexport const fetchMediaItemsBySourceUrl = async ({\n  mediaItemUrls,\n  selectionSet,\n  builtFragments,\n  createContentDigest,\n  actions,\n  helpers,\n  allMediaItemNodes = [],\n}) => {\n  const processedMediaItemUrls = processAndDedupeImageUrls(mediaItemUrls)\n\n  const { cachedMediaItemNodeIds, uncachedMediaItemUrls } =\n    processedMediaItemUrls.reduce(\n      (accumulator, url) => {\n        const { id } = getFileNodeMetaBySourceUrl(url) || {}\n\n        // if we have a cached image and we haven't already recorded this cached image\n        if (id && !accumulator.cachedMediaItemNodeIds.includes(id)) {\n          // save it\n          accumulator.cachedMediaItemNodeIds.push(id)\n        } else if (!id) {\n          // otherwise we need to fetch this media item by url\n          accumulator.uncachedMediaItemUrls.push(url)\n        }\n\n        return accumulator\n      },\n      { cachedMediaItemNodeIds: [], uncachedMediaItemUrls: [] }\n    )\n\n  // take our previously cached id's and get nodes for them\n  const previouslyCachedMediaItemNodes = await Promise.all(\n    cachedMediaItemNodeIds.map(async nodeId => {\n      const node = await helpers.getNode(nodeId)\n\n      const parentNode =\n        node?.internal?.type === `File` && node?.parent\n          ? helpers.getNode(node.parent)\n          : null\n\n      return parentNode || node\n    })\n  )\n\n  const {\n    schema: { perPage },\n  } = getPluginOptions()\n\n  // chunk up all our uncached media items\n  const mediaItemUrlsPages = chunk(uncachedMediaItemUrls, perPage)\n\n  // since we're using an async queue, we need a way to know when it's finished\n  // we pass this resolve function into the queue function so it can let us\n  // know when it's finished\n\n  // we have no media items to fetch,\n  // so we need to resolve this promise\n  // otherwise it will never resolve below.\n  if (!mediaItemUrlsPages.length) {\n    return Promise.resolve(previouslyCachedMediaItemNodes)\n  }\n\n  const allPromises = []\n  // for all the images we don't have cached, loop through and get them all\n  for (const [index, sourceUrls] of mediaItemUrlsPages.entries()) {\n    const curPromise = new Promise(resolve => {\n      pushPromiseOntoRetryQueue({\n        helpers,\n        createContentDigest,\n        actions,\n        queue: mediaNodeFetchQueue,\n        retryKey: `Media Item by sourceUrl query #${index}, digest: ${createContentDigest(\n          sourceUrls.join()\n        )}`,\n        retryPromise: async () => {\n          const query = /* GraphQL */ `\n            query MEDIA_ITEMS {\n              ${sourceUrls\n                .map(\n                  (sourceUrl, index) => /* GraphQL */ `\n                mediaItem__index_${index}: mediaItem(id: \"${sourceUrl}\", idType: SOURCE_URL) {\n                  ...MediaItemFragment\n                }\n              `\n                )\n                .join(` `)}\n            }\n\n            fragment MediaItemFragment on MediaItem {\n              ${selectionSet}\n            }\n\n            ${builtFragments || ``}\n          `\n\n          const { data } = await fetchGraphql({\n            query,\n            variables: {\n              first: perPage,\n              after: null,\n            },\n            errorContext: `Error occurred while fetching \"MediaItem\" nodes in inline html.`,\n          })\n\n          // since we're getting each media item on it's single node root field\n          // we just needs the values of each property in the response\n          // anything that returns null is because we tried to get the source url\n          // plus the source url minus resize patterns. So there will be nulls\n          // since only the full source url will return data\n          const thisPagesNodes = Object.values(data).filter(Boolean)\n\n          // take the WPGraphQL nodes we received and create Gatsby nodes out of them\n          const nodes = await Promise.all(\n            thisPagesNodes.map(node =>\n              createMediaItemNode({\n                node,\n                helpers,\n                createContentDigest,\n                actions,\n                allMediaItemNodes,\n                parentName: `Fetching referenced MediaItem nodes by sourceUrl`,\n              })\n            )\n          )\n\n          nodes.forEach((node, index) => {\n            if (!node || !node?.localFile?.id) {\n              return\n            }\n\n            // this is how we're caching nodes we've previously fetched.\n            store.dispatch.imageNodes.pushNodeMeta({\n              id: node.localFile.id,\n              sourceUrl: sourceUrls[index],\n              modifiedGmt: node.modifiedGmt,\n            })\n          })\n\n          resolve(nodes)\n        },\n      })\n    })\n    allPromises.push(curPromise)\n  }\n\n  await mediaNodeFetchQueue.onIdle()\n  await mediaFileFetchQueue.onIdle()\n\n  const allResults = await Promise.all(allPromises)\n  return [...previouslyCachedMediaItemNodes, ...allResults.flat()]\n}\n\nexport const fetchMediaItemsById = async ({\n  mediaItemIds,\n  settings,\n  url,\n  selectionSet,\n  builtFragments,\n  createContentDigest,\n  actions,\n  helpers,\n  typeInfo,\n}) => {\n  const newMediaItemIds = mediaItemIds.filter(id => !helpers.getNode(id))\n\n  const {\n    schema: { perPage },\n  } = getPluginOptions()\n\n  const chunkedIds = chunk(newMediaItemIds, perPage)\n\n  if (!newMediaItemIds.length) {\n    return Promise.resolve([])\n  }\n\n  const allMediaItemNodes = []\n  const allPromises = []\n\n  for (const [index, relayIds] of chunkedIds.entries()) {\n    const curPromise = new Promise(resolve => {\n      pushPromiseOntoRetryQueue({\n        helpers,\n        createContentDigest,\n        actions,\n        queue: mediaNodeFetchQueue,\n        retryKey: `Media Item query #${index}, digest: ${createContentDigest(\n          relayIds.join()\n        )}`,\n        retryPromise: async () => {\n          // relay id's are base64 encoded from strings like attachment:89381\n          // where 89381 is the id we want for our query\n          // so we split on the : and get the last item in the array, which is the id\n          // once we can get a list of media items by relay id's, we can remove atob\n          const ids = relayIds.map(id => atob(id).split(`:`).slice(-1)[0])\n\n          const query = `\n          query MEDIA_ITEMS($in: [ID]) {\n            mediaItems(first: ${perPage}, where:{ in: $in }) {\n              nodes {\n                ${selectionSet}\n              }\n            }\n          }\n\n          ${builtFragments || ``}\n        `\n          const allNodesOfContentType = await paginatedWpNodeFetch({\n            first: perPage,\n            contentTypePlural: typeInfo.pluralName,\n            nodeTypeName: typeInfo.nodesTypeName,\n            query,\n            url,\n            helpers,\n            settings,\n            in: ids,\n            // this allows us to retry-on-end-of-queue\n            throwFetchErrors: true,\n          })\n\n          const nodes = await Promise.all(\n            allNodesOfContentType.map(node =>\n              createMediaItemNode({\n                node,\n                helpers,\n                createContentDigest,\n                actions,\n                allMediaItemNodes,\n                referencedMediaItemNodeIds: mediaItemIds,\n                parentName: `Fetching referenced MediaItem nodes by id`,\n              })\n            )\n          )\n\n          resolve(nodes)\n        },\n      })\n    })\n    allPromises.push(curPromise)\n  }\n\n  await mediaNodeFetchQueue.onIdle()\n  await mediaFileFetchQueue.onIdle()\n\n  const allResults = await Promise.all(allPromises)\n  return allResults.flat()\n}\n\nexport default async function fetchReferencedMediaItemsAndCreateNodes({\n  referencedMediaItemNodeIds,\n  mediaItemUrls,\n}) {\n  const state = store.getState()\n  const queryInfo = state.remoteSchema.nodeQueries.mediaItems\n  const { helpers, pluginOptions } = state.gatsbyApi\n\n  // don't fetch media items if they are excluded via pluginOptions\n  if (pluginOptions.type?.MediaItem?.exclude) {\n    return []\n  }\n\n  const { createContentDigest, actions } = helpers\n  const { url } = pluginOptions\n  const { typeInfo, settings, selectionSet, builtFragments } = queryInfo\n\n  let createdNodes = []\n\n  if (referencedMediaItemNodeIds?.length) {\n    const nodesSourcedById = await fetchMediaItemsById({\n      mediaItemIds: referencedMediaItemNodeIds,\n      settings,\n      url,\n      selectionSet,\n      builtFragments,\n      createContentDigest,\n      actions,\n      helpers,\n      typeInfo,\n    })\n\n    createdNodes = nodesSourcedById\n  }\n\n  if (mediaItemUrls?.length) {\n    const nodesSourcedByUrl = await fetchMediaItemsBySourceUrl({\n      mediaItemUrls,\n      settings,\n      url,\n      selectionSet,\n      builtFragments,\n      createContentDigest,\n      actions,\n      helpers,\n      typeInfo,\n    })\n\n    createdNodes = [...createdNodes, ...nodesSourcedByUrl]\n  }\n\n  return createdNodes.filter(Boolean)\n}\n"],"mappings":"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"}