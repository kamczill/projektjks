{"version":3,"file":"gatsby-plugin-image-e84ccef61892cb3e70f9.js","mappings":"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","sources":["webpack://gatsby-starter-default/../src/image-utils.ts","webpack://gatsby-starter-default/../src/components/hooks.ts","webpack://gatsby-starter-default/../src/components/layout-wrapper.tsx","webpack://gatsby-starter-default/../src/components/picture.tsx","webpack://gatsby-starter-default/../src/components/placeholder.tsx","webpack://gatsby-starter-default/../src/components/main-image.tsx","webpack://gatsby-starter-default/../src/components/gatsby-image.server.tsx","webpack://gatsby-starter-default/../src/components/gatsby-image.browser.tsx","webpack://gatsby-starter-default/../src/components/static-image.server.tsx","webpack://gatsby-starter-default/../src/components/static-image.tsx","webpack://gatsby-starter-default/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"],"names":["message","console","warn","a","b","images","map","image","src","width","join","filename","lastIndexOf","dot","slice","ext","length","args","layout","height","sourceMetadata","breakpoints","aspectRatio","formats","format","toLowerCase","camelCase","Math","round","setDefaultDimensions","generateImageSource","fit","options","_generateImageSource","pluginName","reporter","backgroundColor","placeholderURL","Error","formatFromFilename","Set","size","has","delete","add","imgDimensions","DEFAULT_BREAKPOINTS","Object","entries","filter","_","erroneousUserDimensions","dim","outputPixelDensities","DEFAULT_PIXEL_DENSITIES","dedupeAndSortDensities","getDimensionsAndAspectRatio","calculated","fixedDimension","sizes","densities","density","presentationWidth","originalWidth","presentationHeight","unscaledWidth","calculateImageSizes","sources","imageSizes","forEach","imageSrc","Boolean","find","img","unscaled","result","fallback","srcSet","getSrcSet","push","type","imageProps","placeholder","values","Array","from","sort","sortNumeric","l","d","min","includes","dimensions","Number","MAX_SAFE_INTEGER","widthOption","heightOption","imageAspectRatio","max","prototype","node","_node$images","_node$images$fallback","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","getImage","_getImage","_getImage$images","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","EVERY_BREAKPOINT","isLoading","isLoaded","loading","style","shouldLoad","opacity","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","defaultImage","artDirected","media","output","source","paddingTop","maxWidth","display","React","alt","role","children","Fragment","Sizer","decoding","undefined","t","s","Image","key","fallbackImage","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","altValidator","as","className","class","preactClass","onStartLoad","onLoad","onError","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","cacheKey","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","GatsbyImageBrowser","__imageData","imageData","__error","StaticImage","input","isArray","TypeError","assign","pascalCase","x","trim","toUpperCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","preserveCamelCase","replace","p1","m","charAt","module","exports"],"sourceRoot":""}